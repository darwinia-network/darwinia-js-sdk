import { buildRuntimeCall, Dispatch, decodeCall } from "../../../call";
import { ethers, BytesLike } from "ethers";
import { Metadata } from "@polkadot/types";

export const get<%= prefix %> = (dispatch: Dispatch, metadata: Metadata) => {
    return {
<%_ for(let i = 0; i < palletCalls.length; i++) {
        // [callName, [paramName, paramType], docs]
        const call = palletCalls[i];
        const callName = call[0];
	const callParams = call[1];
	const callDocs = call[2];
	const input = [];
	const input2 = [];
_%>
        /**
<%_
	for(let k = 0; k < callDocs.length; k++) {
_%>
         * <%- callDocs[k] %>
<%_
	}
_%>
         *
<%_
        for(let j = 0; j < callParams.length; j++) {
	    // [paramName, paramType]
	    const callParam = callParams[j];
	    const paramName = callParam[0];
	    const paramType = callParam[1];
_%>
         * @param <%- `_${paramName}` %>: <%- paramType %>
<%_
	    input.push(`_${paramName}: unknown`)
	    input2.push(`_${paramName}`)
	}
_%>
         */
        <%= callName %>: async (signer: ethers.Signer<%= input.length > 0 ? `, ${input.join(", ")}` : '' %>): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, '<%= prefix %>', '<%= callName %>', false<%= input2.length > 0 ? `, ${input2.join(", ")}` : '' %>);
        },

        <%= `${callName}H` %>: async (signer: ethers.Signer<%= input.length > 0 ? ', data: BytesLike' : '' %>): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, '<%= prefix %>', '<%= callName %>', true<%= input.length > 0 ? ', data' : '' %>);
        },

        <%= `build${capitalize(callName)}Call` %>: (<%= input.join(", ") %>) => {
            return buildRuntimeCall(metadata, '<%= prefix %>', '<%= callName %>', {
	    <%_
		for(let j = 0; j < callParams.length; j++) {
		    // [paramName, paramType]
		    const callParam = callParams[j];
		    const paramName = callParam[0];
	    _%>
                <%= paramName %>: _<%= paramName %>,
	    <%_ 
	        }
	    _%>
            });
        },

        <%= `build${capitalize(callName)}CallH` %>: (argsBytes: BytesLike) => {
            return decodeCall(metadata, '<%= prefix %>', '<%= callName %>', argsBytes)
        },

<%_ 
    }
_%>
    }
}
