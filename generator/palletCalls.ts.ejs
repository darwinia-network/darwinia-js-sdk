/**
 * This is the doc comment for pallet `<%= prefix %>`'s calls. 
 * 
 * `<%= prefix %>`'s storages: {@link: module:<%= chainName %>/<%= moduleName %>/storages}
 *
 * @module <%= chainName %>/<%= moduleName %>/calls
 */
import { buildRuntimeCall, Dispatch, decodeCall } from "../../../index";
import { ethers, BytesLike } from "ethers";
import { Metadata } from "@polkadot/types";

export const get<%= prefix %> = (dispatch: Dispatch, metadata: Metadata) => {
    return {
<%_ for(let i = 0; i < palletCalls.length; i++) {
        // [callName, [paramName, paramType], docs]
        const call = palletCalls[i];
        const callName = call[0];
        const callParams = call[1];
        const callDocs = call[2];
        const input = [];
_%>
        /**
<%_
        for(let k = 0; k < callDocs.length; k++) {
_%>
         * <%- callDocs[k] %>
<%_
	}
_%>
         *
<%_
        for(let j = 0; j < callParams.length; j++) {
           // [paramName, paramType]
           const callParam = callParams[j];
           const paramName = callParam[0];
           const paramType = callParam[1];
_%>
         * @param {unknown} <%- `_${paramName}` %> <%- paramType %>
<%_
           input.push(`_${paramName}: unknown`)
        }
_%>
         * @instance
         */
        <%= callName %>: async (signer: ethers.Signer<%= input.length > 0 ? `, ${input.join(", ")}` : '' %>): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, '<%= prefix %>', '<%= callName %>', false, {
<%_
            for(let j = 0; j < callParams.length; j++) {
                // [paramName, paramType]
                const callParam = callParams[j];
                const paramName = callParam[0];
_%>
                <%= paramName %>: _<%= paramName %>,
<%_ 
            }
_%>
           });
        },

        /**
         * Similar to {@link: <%= chainName %>/<%= moduleName %>/calls/<%= callName %>}, but with scale encoded args.
         *
         * @param {BytesLike} argsBytes the args bytes
         * @instance
         */
        <%= `${callName}H` %>: async (signer: ethers.Signer<%= input.length > 0 ? ', argsBytes: BytesLike' : '' %>): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, '<%= prefix %>', '<%= callName %>', true<%= input.length > 0 ? ', argsBytes' : '' %>);
        },

        /**
         * Build a call object to be used as a call param in other functions, such as `utilities.batchAll`.
         *
         * @returns {CallAsParam} 
         */
        <%= `build${capitalize(callName)}Call` %>: (<%= input.join(", ") %>) => {
            return buildRuntimeCall(metadata, '<%= prefix %>', '<%= callName %>', {
<%_
            for(let j = 0; j < callParams.length; j++) {
                // [paramName, paramType]
                const callParam = callParams[j];
                const paramName = callParam[0];
_%>
                <%= paramName %>: _<%= paramName %>,
<%_ 
            }
_%>
            });
        },

        /**
         * Build a call object to be used as a call param in other functions, such as `utilities.batchAll`.
         * Similar to <%= `build${capitalize(callName)}Call` %>, but with scale encoded args.
         *
         * @returns {CallAsParam} 
         */
        <%= `build${capitalize(callName)}CallH` %>: (argsBytes: BytesLike) => {
            return decodeCall(metadata, '<%= prefix %>', '<%= callName %>', argsBytes)
        },

<%_ 
    }
_%>
    }
}

