import {GetStorage} from "../../../storage";

export const getMultisig = (getStorage: GetStorage) => {
    return {

        /**
        * The set of open multisig operations.
        *
        * @param param0: AccountId20: [U8; 20]
        * @param param1: [U8; 32]
        * @return Multisig: {when: {height: U32, index: U32}, deposit: U128, depositor: [U8; 20], approvals: Vec<[U8; 20]>}
        */
        multisigs: async (param0: unknown, param1: unknown): Promise<string | null> => {
            return await getStorage('Multisig', 'Multisigs', param0, param1);
        },

        /**
        *
        * @param param0: [U8; 32]
        * @return ((Compact<U32>, Enum<{System: Enum<{fill_block: {ratio: U32}, remark: {remark: Vec<U8>}, set_heap_pages: {pages: U64}, set_code: {code: Vec<U8>}, set_code_without_checks: {code: Vec<U8>}, set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, kill_storage: {keys: Vec<Vec<U8>>}, kill_prefix: {prefix: Vec<U8>, subkeys: U32}, remark_with_event: {remark: Vec<U8>}}>, ParachainSystem: Enum<{set_validation_data: {data: {validation_data: {parent_head: Vec<U8>, relay_parent_number: U32, relay_parent_storage_root: [U8; 32], max_pov_size: U32}, relay_chain_state: {trie_nodes: Vec<Vec<U8>>}, downward_messages: Vec<{sent_at: U32, msg: Vec<U8>}>, horizontal_messages: Vec<(U32, Vec<{sent_at: U32, data: Vec<U8>}>)>}}, sudo_send_upward_message: {message: Vec<U8>}, authorize_upgrade: {code_hash: [U8; 32]}, enact_authorized_upgrade: {code: Vec<U8>}}>, Timestamp: Enum<{set: {now: Compact<U64>}}>, ParachainInfo: Enum<{}>, Balances: Enum<{transfer: {dest: [U8; 20], value: Compact<U128>}, set_balance: {who: [U8; 20], new_free: Compact<U128>, new_reserved: Compact<U128>}, force_transfer: {source: [U8; 20], dest: [U8; 20], value: Compact<U128>}, transfer_keep_alive: {dest: [U8; 20], value: Compact<U128>}, transfer_all: {dest: [U8; 20], keep_alive: Bool}, force_unreserve: {who: [U8; 20], amount: U128}}>, Assets: Enum<{create: {id: Compact<U64>, admin: [U8; 20], min_balance: U128}, force_create: {id: Compact<U64>, owner: [U8; 20], is_sufficient: Bool, min_balance: Compact<U128>}, destroy: {id: Compact<U64>, witness: {accounts: Compact<U32>, sufficients: Compact<U32>, approvals: Compact<U32>}}, mint: {id: Compact<U64>, beneficiary: [U8; 20], amount: Compact<U128>}, burn: {id: Compact<U64>, who: [U8; 20], amount: Compact<U128>}, transfer: {id: Compact<U64>, target: [U8; 20], amount: Compact<U128>}, transfer_keep_alive: {id: Compact<U64>, target: [U8; 20], amount: Compact<U128>}, force_transfer: {id: Compact<U64>, source: [U8; 20], dest: [U8; 20], amount: Compact<U128>}, freeze: {id: Compact<U64>, who: [U8; 20]}, thaw: {id: Compact<U64>, who: [U8; 20]}, freeze_asset: {id: Compact<U64>}, thaw_asset: {id: Compact<U64>}, transfer_ownership: {id: Compact<U64>, owner: [U8; 20]}, set_team: {id: Compact<U64>, issuer: [U8; 20], admin: [U8; 20], freezer: [U8; 20]}, set_metadata: {id: Compact<U64>, name: Vec<U8>, symbol: Vec<U8>, decimals: U8}, clear_metadata: {id: Compact<U64>}, force_set_metadata: {id: Compact<U64>, name: Vec<U8>, symbol: Vec<U8>, decimals: U8, is_frozen: Bool}, force_clear_metadata: {id: Compact<U64>}, force_asset_status: {id: Compact<U64>, owner: [U8; 20], issuer: [U8; 20], admin: [U8; 20], freezer: [U8; 20], min_balance: Compact<U128>, is_sufficient: Bool, is_frozen: Bool}, approve_transfer: {id: Compact<U64>, delegate: [U8; 20], amount: Compact<U128>}, cancel_approval: {id: Compact<U64>, delegate: [U8; 20]}, force_cancel_approval: {id: Compact<U64>, owner: [U8; 20], delegate: [U8; 20]}, transfer_approved: {id: Compact<U64>, owner: [U8; 20], destination: [U8; 20], amount: Compact<U128>}, touch: {id: Compact<U64>}, refund: {id: Compact<U64>, allow_burn: Bool}}>, Deposit: Enum<{lock: {amount: U128, months: U8}, claim: , claim_with_penalty: {id: U16}}>, AccountMigration: Enum<{migrate: {from: [U8; 32], to: [U8; 20], signature: [U8; 64]}}>, Authorship: Enum<{set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}>}}>, Staking: Enum<{stake: {ring_amount: U128, kton_amount: U128, deposits: Vec<U16>}, unstake: {ring_amount: U128, kton_amount: U128, deposits: Vec<U16>}, claim: , collect: {commission: U32}, nominate: {target: [U8; 20]}, chill: }>, Session: Enum<{set_keys: {keys: {aura: [U8; 32]}, proof: Vec<U8>}, purge_keys: }>, Democracy: Enum<{propose: {proposal_hash: [U8; 32], value: Compact<U128>}, second: {proposal: Compact<U32>, seconds_upper_bound: Compact<U32>}, vote: {ref_index: Compact<U32>, vote: Enum<{Standard, Split}>}, emergency_cancel: {ref_index: U32}, external_propose: {proposal_hash: [U8; 32]}, external_propose_majority: {proposal_hash: [U8; 32]}, external_propose_default: {proposal_hash: [U8; 32]}, fast_track: {proposal_hash: [U8; 32], voting_period: U32, delay: U32}, veto_external: {proposal_hash: [U8; 32]}, cancel_referendum: {ref_index: Compact<U32>}, cancel_queued: {which: U32}, delegate: {to: [U8; 20], conviction: Enum<{None, Locked1x, Locked2x, Locked3x, Locked4x, Locked5x, Locked6x}>, balance: U128}, undelegate: , clear_public_proposals: , note_preimage: {encoded_proposal: Vec<U8>}, note_preimage_operational: {encoded_proposal: Vec<U8>}, note_imminent_preimage: {encoded_proposal: Vec<U8>}, note_imminent_preimage_operational: {encoded_proposal: Vec<U8>}, reap_preimage: {proposal_hash: [U8; 32], proposal_len_upper_bound: Compact<U32>}, unlock: {target: [U8; 20]}, remove_vote: {index: U32}, remove_other_vote: {target: [U8; 20], index: U32}, enact_proposal: {proposal_hash: [U8; 32], index: U32}, blacklist: {proposal_hash: [U8; 32], maybe_ref_index: Enum<{None, Some}>}, cancel_proposal: {prop_index: Compact<U32>}}>, Council: Enum<{set_members: {new_members: Vec<[U8; 20]>, prime: Enum<{None, Some}>, old_count: U32}, execute: {proposal: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>, length_bound: Compact<U32>}, propose: {threshold: Compact<U32>, proposal: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>, length_bound: Compact<U32>}, vote: {proposal: [U8; 32], index: Compact<U32>, approve: Bool}, close: {proposal_hash: [U8; 32], index: Compact<U32>, proposal_weight_bound: Compact<{ref_time: U64}>, length_bound: Compact<U32>}, disapprove_proposal: {proposal_hash: [U8; 32]}}>, TechnicalCommittee: Enum<{set_members: {new_members: Vec<[U8; 20]>, prime: Enum<{None, Some}>, old_count: U32}, execute: {proposal: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>, length_bound: Compact<U32>}, propose: {threshold: Compact<U32>, proposal: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>, length_bound: Compact<U32>}, vote: {proposal: [U8; 32], index: Compact<U32>, approve: Bool}, close: {proposal_hash: [U8; 32], index: Compact<U32>, proposal_weight_bound: Compact<{ref_time: U64}>, length_bound: Compact<U32>}, disapprove_proposal: {proposal_hash: [U8; 32]}}>, PhragmenElection: Enum<{vote: {votes: Vec<[U8; 20]>, value: Compact<U128>}, remove_voter: , submit_candidacy: {candidate_count: Compact<U32>}, renounce_candidacy: {renouncing: Enum<{Member, RunnerUp, Candidate}>}, remove_member: {who: [U8; 20], slash_bond: Bool, rerun_election: Bool}, clean_defunct_voters: {num_voters: U32, num_defunct: U32}}>, TechnicalMembership: Enum<{add_member: {who: [U8; 20]}, remove_member: {who: [U8; 20]}, swap_member: {remove: [U8; 20], add: [U8; 20]}, reset_members: {members: Vec<[U8; 20]>}, change_key: {new: [U8; 20]}, set_prime: {who: [U8; 20]}, clear_prime: }>, Treasury: Enum<{propose_spend: {value: Compact<U128>, beneficiary: [U8; 20]}, reject_proposal: {proposal_id: Compact<U32>}, approve_proposal: {proposal_id: Compact<U32>}, spend: {amount: Compact<U128>, beneficiary: [U8; 20]}, remove_approval: {proposal_id: Compact<U32>}}>, Tips: Enum<{report_awesome: {reason: Vec<U8>, who: [U8; 20]}, retract_tip: {hash: [U8; 32]}, tip_new: {reason: Vec<U8>, who: [U8; 20], tip_value: Compact<U128>}, tip: {hash: [U8; 32], tip_value: Compact<U128>}, close_tip: {hash: [U8; 32]}, slash_tip: {hash: [U8; 32]}}>, Sudo: Enum<{sudo: {call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>}, sudo_unchecked_weight: {call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>, weight: {ref_time: U64}}, set_key: {new: [U8; 20]}, sudo_as: {who: [U8; 20], call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>}}>, Vesting: Enum<{vest: , vest_other: {target: [U8; 20]}, vested_transfer: {target: [U8; 20], schedule: {locked: U128, per_block: U128, starting_block: U32}}, force_vested_transfer: {source: [U8; 20], target: [U8; 20], schedule: {locked: U128, per_block: U128, starting_block: U32}}, merge_schedules: {schedule1_index: U32, schedule2_index: U32}}>, Utility: Enum<{batch: {calls: Vec<Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>>}, as_derivative: {index: U16, call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>}, batch_all: {calls: Vec<Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>>}, dispatch_as: {as_origin: Enum<{system, Council, TechnicalCommittee, PolkadotXcm, CumulusXcm, Ethereum, MessageTransact, Void}>, call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>}, force_batch: {calls: Vec<Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>>}}>, Identity: Enum<{add_registrar: {account: [U8; 20]}, set_identity: {info: {additional: Vec<(Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>, Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>)>, display: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>, legal: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>, web: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>, riot: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>, email: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>, pgp_fingerprint: Enum<{None, Some}>, image: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>, twitter: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>}}, set_subs: {subs: Vec<([U8; 20], Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>)>}, clear_identity: , request_judgement: {reg_index: Compact<U32>, max_fee: Compact<U128>}, cancel_request: {reg_index: U32}, set_fee: {index: Compact<U32>, fee: Compact<U128>}, set_account_id: {index: Compact<U32>, new: [U8; 20]}, set_fields: {index: Compact<U32>, fields: U64}, provide_judgement: {reg_index: Compact<U32>, target: [U8; 20], judgement: Enum<{Unknown, FeePaid, Reasonable, KnownGood, OutOfDate, LowQuality, Erroneous}>, identity: [U8; 32]}, kill_identity: {target: [U8; 20]}, add_sub: {sub: [U8; 20], data: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>}, rename_sub: {sub: [U8; 20], data: Enum<{None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256}>}, remove_sub: {sub: [U8; 20]}, quit_sub: }>, Scheduler: Enum<{schedule: {when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel: {when: U32, index: U32}, schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel_named: {id: Vec<U8>}, schedule_after: {after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}}>, Preimage: Enum<{note_preimage: {bytes: Vec<U8>}, unnote_preimage: {hash: [U8; 32]}, request_preimage: {hash: [U8; 32]}, unrequest_preimage: {hash: [U8; 32]}}>, Proxy: Enum<{proxy: {real: [U8; 20], force_proxy_type: Enum<{None, Some}>, call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>}, add_proxy: {delegate: [U8; 20], proxy_type: Enum<{Any, NonTransfer, Governance, IdentityJudgement, EthereumBridge}>, delay: U32}, remove_proxy: {delegate: [U8; 20], proxy_type: Enum<{Any, NonTransfer, Governance, IdentityJudgement, EthereumBridge}>, delay: U32}, remove_proxies: , create_pure: {proxy_type: Enum<{Any, NonTransfer, Governance, IdentityJudgement, EthereumBridge}>, delay: U32, index: U16}, kill_pure: {spawner: [U8; 20], proxy_type: Enum<{Any, NonTransfer, Governance, IdentityJudgement, EthereumBridge}>, index: U16, height: Compact<U32>, ext_index: Compact<U32>}, announce: {real: [U8; 20], call_hash: [U8; 32]}, remove_announcement: {real: [U8; 20], call_hash: [U8; 32]}, reject_announcement: {delegate: [U8; 20], call_hash: [U8; 32]}, proxy_announced: {delegate: [U8; 20], real: [U8; 20], force_proxy_type: Enum<{None, Some}>, call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>}}>, Multisig: Enum<{as_multi_threshold_1: {other_signatories: Vec<[U8; 20]>, call: Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>}, as_multi: {threshold: U16, other_signatories: Vec<[U8; 20]>, maybe_timepoint: Enum<{None, Some}>, call: (Compact<U32>, Enum<{System, ParachainSystem, Timestamp, ParachainInfo, Balances, Assets, Deposit, AccountMigration, Authorship, Staking, Session, Democracy, Council, TechnicalCommittee, PhragmenElection, TechnicalMembership, Treasury, Tips, Sudo, Vesting, Utility, Identity, Scheduler, Preimage, Proxy, Multisig, XcmpQueue, PolkadotXcm, CumulusXcm, DmpQueue, Ethereum, Evm, BaseFee, MessageTransact}>), store_call: Bool, max_weight: {ref_time: U64}}, approve_as_multi: {threshold: U16, other_signatories: Vec<[U8; 20]>, maybe_timepoint: Enum<{None, Some}>, call_hash: [U8; 32], max_weight: {ref_time: U64}}, cancel_as_multi: {threshold: U16, other_signatories: Vec<[U8; 20]>, timepoint: {height: U32, index: U32}, call_hash: [U8; 32]}}>, XcmpQueue: Enum<{service_overweight: {index: U64, weight_limit: {ref_time: U64}}, suspend_xcm_execution: , resume_xcm_execution: , update_suspend_threshold: {new: U32}, update_drop_threshold: {new: U32}, update_resume_threshold: {new: U32}, update_threshold_weight: {new: {ref_time: U64}}, update_weight_restrict_decay: {new: {ref_time: U64}}, update_xcmp_max_individual_weight: {new: {ref_time: U64}}}>, PolkadotXcm: Enum<{send: {dest: Enum<{V0, V1}>, message: Enum<{V0, V1, V2}>}, teleport_assets: {dest: Enum<{V0, V1}>, beneficiary: Enum<{V0, V1}>, assets: Enum<{V0, V1}>, fee_asset_item: U32}, reserve_transfer_assets: {dest: Enum<{V0, V1}>, beneficiary: Enum<{V0, V1}>, assets: Enum<{V0, V1}>, fee_asset_item: U32}, execute: {message: Enum<{V0, V1, V2}>, max_weight: {ref_time: U64}}, force_xcm_version: {location: {parents: U8, interior: Enum<{Here, X1, X2, X3, X4, X5, X6, X7, X8}>}, xcm_version: U32}, force_default_xcm_version: {maybe_xcm_version: Enum<{None, Some}>}, force_subscribe_version_notify: {location: Enum<{V0, V1}>}, force_unsubscribe_version_notify: {location: Enum<{V0, V1}>}, limited_reserve_transfer_assets: {dest: Enum<{V0, V1}>, beneficiary: Enum<{V0, V1}>, assets: Enum<{V0, V1}>, fee_asset_item: U32, weight_limit: Enum<{Unlimited, Limited}>}, limited_teleport_assets: {dest: Enum<{V0, V1}>, beneficiary: Enum<{V0, V1}>, assets: Enum<{V0, V1}>, fee_asset_item: U32, weight_limit: Enum<{Unlimited, Limited}>}}>, CumulusXcm: Enum<{}>, DmpQueue: Enum<{service_overweight: {index: U64, weight_limit: {ref_time: U64}}}>, Ethereum: Enum<{transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}}>, Evm: Enum<{withdraw: {address: [U8; 20], value: U128}, call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, BaseFee: Enum<{set_base_fee_per_gas: {fee: [U64; 4]}, set_elasticity: {elasticity: U32}}>, MessageTransact: Enum<{message_transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}}>}>), [U8; 20], U128)
        */
        calls: async (param0: unknown): Promise<string | null> => {
            return await getStorage('Multisig', 'Calls', param0);
        },
    };
};
