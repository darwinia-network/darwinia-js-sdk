import { buildRuntimeCall, Dispatch } from "../../../call";
import { ethers, BytesLike } from "ethers";
import { Metadata } from "@polkadot/types";
import {  } from "ethers";

export const getCouncil = (dispatch: Dispatch, metadata: Metadata) => {
    return {
        /**
         * Set the collective's membership.
         * 
         * - `new_members`: The new member list. Be nice to the chain and provide it sorted.
         * - `prime`: The prime member whose vote sets the default.
         * - `old_count`: The upper bound for the previous number of members in storage. Used for
         *   weight estimation.
         * 
         * Requires root origin.
         * 
         * NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but
         *       the weight estimations rely on it to estimate dispatchable weight.
         * 
         * # WARNING:
         * 
         * The `pallet-collective` can also be managed by logic outside of the pallet through the
         * implementation of the trait [`ChangeMembers`].
         * Any call to `set_members` must be careful that the member set doesn't get out of sync
         * with other logic managing the member set.
         * 
         * # <weight>
         * ## Weight
         * - `O(MP + N)` where:
         *   - `M` old-members-count (code- and governance-bounded)
         *   - `N` new-members-count (code- and governance-bounded)
         *   - `P` proposals-count (code-bounded)
         * - DB:
         *   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the
         *     members
         *   - 1 storage read (codec `O(P)`) for reading the proposals
         *   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal
         *   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one
         * # </weight>
         *
         * @param _new_members: Vec<[U8; 32]>
         * @param _prime: Enum<{0/None: , 1/Some: [U8; 32]}>
         * @param _old_count: U32
         */
        setMembers: async (signer: ethers.Signer, _new_members: unknown, _prime: unknown, _old_count: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'setMembers', false, _new_members, _prime, _old_count);
        },

        setMembersD: async (signer: ethers.Signer, data: BytesLike): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'setMembers', true, data);
        },

        setMembersCall: (_new_members: unknown, _prime: unknown, _old_count: unknown) => {
            return buildRuntimeCall(metadata, 'Council', 'setMembers', {
                new_members: _new_members,
                prime: _prime,
                old_count: _old_count,
            });
        },

        /**
         * Dispatch a proposal from a member using the `Member` origin.
         * 
         * Origin must be a member of the collective.
         * 
         * # <weight>
         * ## Weight
         * - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching
         *   `proposal`
         * - DB: 1 read (codec `O(M)`) + DB access of `proposal`
         * - 1 event
         * # </weight>
         *
         * @param _proposal: Enum<{0/System: Enum<{0/fill_block: {ratio: U32}, 1/remark: {remark: Vec<U8>}, 2/set_heap_pages: {pages: U64}, 3/set_code: {code: Vec<U8>}, 4/set_code_without_checks: {code: Vec<U8>}, 5/set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, 6/kill_storage: {keys: Vec<Vec<U8>>}, 7/kill_prefix: {prefix: Vec<U8>, subkeys: U32}, 8/remark_with_event: {remark: Vec<U8>}}>, 2/Babe: Enum<{0/report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 1/report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 2/plan_config_change: {config: Enum<{"1/V1"}>}}>, 3/Timestamp: Enum<{0/set: {now: Compact<U64>}}>, 4/Indices: Enum<{0/claim: {index: U32}, 1/transfer: {new: [U8; 32], index: U32}, 2/free: {index: U32}, 3/force_transfer: {new: [U8; 32], index: U32, freeze: Bool}, 4/freeze: {index: U32}}>, 23/Balances: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 24/Kton: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 6/Authorship: Enum<{0/set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}>, 38/ElectionProviderMultiPhase: Enum<{0/submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>, votes17: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 16], Compact<U16>)>, votes18: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 17], Compact<U16>)>, votes19: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 18], Compact<U16>)>, votes20: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 19], Compact<U16>)>, votes21: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 20], Compact<U16>)>, votes22: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 21], Compact<U16>)>, votes23: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 22], Compact<U16>)>, votes24: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 23], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, 1/set_minimum_untrusted_score: {maybe_next_score: Enum<{"0/None", "1/Some"}>}, 2/set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, 3/submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>, votes17: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 16], Compact<U16>)>, votes18: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 17], Compact<U16>)>, votes19: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 18], Compact<U16>)>, votes20: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 19], Compact<U16>)>, votes21: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 20], Compact<U16>)>, votes22: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 21], Compact<U16>)>, votes23: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 22], Compact<U16>)>, votes24: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 23], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, 25/Staking: Enum<{0/bond: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Enum<{"0/RingBalance", "1/KtonBalance"}>, payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>, promise_month: U8}, 1/bond_extra: {max_additional: Enum<{"0/RingBalance", "1/KtonBalance"}>, promise_month: U8}, 2/deposit_extra: {value: U128, promise_month: U8}, 3/unbond: {value: Enum<{"0/RingBalance", "1/KtonBalance"}>}, 4/withdraw_unbonded: {num_slashing_spans: U32}, 5/claim_mature_deposits: , 6/try_claim_deposits_with_punish: {expire_time: U64}, 7/validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, 8/nominate: {targets: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 9/chill: , 10/set_payee: {payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>}, 11/set_controller: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 12/set_validator_count: {new: Compact<U32>}, 13/increase_validator_count: {additional: Compact<U32>}, 14/scale_validator_count: {factor: U8}, 15/force_no_eras: , 16/force_new_era: , 17/set_invulnerables: {invulnerables: Vec<[U8; 32]>}, 18/force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, 19/force_new_era_always: , 20/cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, 21/payout_stakers: {validator_stash: [U8; 32], era: U32}, 22/rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, 23/set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, 24/reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, 25/kick: {who: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 26/set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{"0/None", "1/Some"}>, max_validator_count: Enum<{"0/None", "1/Some"}>, chill_threshold: Enum<{"0/None", "1/Some"}>, min_commission: U32}, 27/chill_other: {controller: [U8; 32]}}>, 9/Session: Enum<{0/set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, 1/purge_keys: }>, 11/Grandpa: Enum<{0/report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 1/report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 2/note_stalled: {delay: U32, best_finalized_block_number: U32}}>, 12/ImOnline: Enum<{0/heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, 36/Democracy: Enum<{0/propose: {proposal_hash: [U8; 32], value: Compact<U128>}, 1/second: {proposal: Compact<U32>, seconds_upper_bound: Compact<U32>}, 2/vote: {ref_index: Compact<U32>, vote: Enum<{"0/Standard", "1/Split"}>}, 3/emergency_cancel: {ref_index: U32}, 4/external_propose: {proposal_hash: [U8; 32]}, 5/external_propose_majority: {proposal_hash: [U8; 32]}, 6/external_propose_default: {proposal_hash: [U8; 32]}, 7/fast_track: {proposal_hash: [U8; 32], voting_period: U32, delay: U32}, 8/veto_external: {proposal_hash: [U8; 32]}, 9/cancel_referendum: {ref_index: Compact<U32>}, 10/cancel_queued: {which: U32}, 11/delegate: {to: [U8; 32], conviction: Enum<{"0/None", "1/Locked1x", "2/Locked2x", "3/Locked3x", "4/Locked4x", "5/Locked5x", "6/Locked6x"}>, balance: U128}, 12/undelegate: , 13/clear_public_proposals: , 14/note_preimage: {encoded_proposal: Vec<U8>}, 15/note_preimage_operational: {encoded_proposal: Vec<U8>}, 16/note_imminent_preimage: {encoded_proposal: Vec<U8>}, 17/note_imminent_preimage_operational: {encoded_proposal: Vec<U8>}, 18/reap_preimage: {proposal_hash: [U8; 32], proposal_len_upper_bound: Compact<U32>}, 19/unlock: {target: [U8; 32]}, 20/remove_vote: {index: U32}, 21/remove_other_vote: {target: [U8; 32], index: U32}, 22/enact_proposal: {proposal_hash: [U8; 32], index: U32}, 23/blacklist: {proposal_hash: [U8; 32], maybe_ref_index: Enum<{"0/None", "1/Some"}>}, 24/cancel_proposal: {prop_index: Compact<U32>}}>, 14/Council: Enum<{0/set_members: {new_members: Vec<[U8; 32]>, prime: Enum<{"0/None", "1/Some"}>, old_count: U32}, 1/execute: {proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 2/propose: {threshold: Compact<U32>, proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 3/vote: {proposal: [U8; 32], index: Compact<U32>, approve: Bool}, 4/close: {proposal_hash: [U8; 32], index: Compact<U32>, proposal_weight_bound: Compact<U64>, length_bound: Compact<U32>}, 5/disapprove_proposal: {proposal_hash: [U8; 32]}}>, 15/TechnicalCommittee: Enum<{0/set_members: {new_members: Vec<[U8; 32]>, prime: Enum<{"0/None", "1/Some"}>, old_count: U32}, 1/execute: {proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 2/propose: {threshold: Compact<U32>, proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 3/vote: {proposal: [U8; 32], index: Compact<U32>, approve: Bool}, 4/close: {proposal_hash: [U8; 32], index: Compact<U32>, proposal_weight_bound: Compact<U64>, length_bound: Compact<U32>}, 5/disapprove_proposal: {proposal_hash: [U8; 32]}}>, 26/PhragmenElection: Enum<{0/vote: {votes: Vec<[U8; 32]>, value: Compact<U128>}, 1/remove_voter: , 2/submit_candidacy: {candidate_count: Compact<U32>}, 3/renounce_candidacy: {renouncing: Enum<{"0/Member", "1/RunnerUp", "2/Candidate"}>}, 4/remove_member: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, has_replacement: Bool}, 5/clean_defunct_voters: {num_voters: U32, num_defunct: U32}}>, 16/TechnicalMembership: Enum<{0/add_member: {who: [U8; 32]}, 1/remove_member: {who: [U8; 32]}, 2/swap_member: {remove: [U8; 32], add: [U8; 32]}, 3/reset_members: {members: Vec<[U8; 32]>}, 4/change_key: {new: [U8; 32]}, 5/set_prime: {who: [U8; 32]}, 6/clear_prime: }>, 32/Treasury: Enum<{0/propose_spend: {value: Compact<U128>, beneficiary: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 1/reject_proposal: {proposal_id: Compact<U32>}, 2/approve_proposal: {proposal_id: Compact<U32>}}>, 44/Tips: Enum<{0/report_awesome: {reason: Vec<U8>, who: [U8; 32]}, 1/retract_tip: {hash: [U8; 32]}, 2/tip_new: {reason: Vec<U8>, who: [U8; 32], tip_value: Compact<U128>}, 3/tip: {hash: [U8; 32], tip_value: Compact<U128>}, 4/close_tip: {hash: [U8; 32]}, 5/slash_tip: {hash: [U8; 32]}}>, 45/Bounties: Enum<{0/propose_bounty: {value: Compact<U128>, description: Vec<U8>}, 1/approve_bounty: {bounty_id: Compact<U32>}, 2/propose_curator: {bounty_id: Compact<U32>, curator: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, fee: Compact<U128>}, 3/unassign_curator: {bounty_id: Compact<U32>}, 4/accept_curator: {bounty_id: Compact<U32>}, 5/award_bounty: {bounty_id: Compact<U32>, beneficiary: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 6/claim_bounty: {bounty_id: Compact<U32>}, 7/close_bounty: {bounty_id: Compact<U32>}, 8/extend_bounty_expiry: {bounty_id: Compact<U32>, remark: Vec<U8>}}>, 17/Utility: Enum<{0/batch: {calls: Vec<Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>>}, 1/as_derivative: {index: U16, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 2/batch_all: {calls: Vec<Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>>}, 3/dispatch_as: {as_origin: Enum<{"0/system", "14/Council", "15/TechnicalCommittee", "40/Ethereum", "4/Void"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}}>, 18/Identity: Enum<{0/add_registrar: {account: [U8; 32]}, 1/set_identity: {info: {additional: Vec<(Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>)>, display: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, legal: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, web: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, riot: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, email: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, pgp_fingerprint: Enum<{"0/None", "1/Some"}>, image: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, twitter: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>}}, 2/set_subs: {subs: Vec<([U8; 32], Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>)>}, 3/clear_identity: , 4/request_judgement: {reg_index: Compact<U32>, max_fee: Compact<U128>}, 5/cancel_request: {reg_index: U32}, 6/set_fee: {index: Compact<U32>, fee: Compact<U128>}, 7/set_account_id: {index: Compact<U32>, new: [U8; 32]}, 8/set_fields: {index: Compact<U32>, fields: U64}, 9/provide_judgement: {reg_index: Compact<U32>, target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, judgement: Enum<{"0/Unknown", "1/FeePaid", "2/Reasonable", "3/KnownGood", "4/OutOfDate", "5/LowQuality", "6/Erroneous"}>}, 10/kill_identity: {target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 11/add_sub: {sub: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, data: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>}, 12/rename_sub: {sub: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, data: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>}, 13/remove_sub: {sub: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 14/quit_sub: }>, 19/Society: Enum<{0/bid: {value: U128}, 1/unbid: {pos: U32}, 2/vouch: {who: [U8; 32], value: U128, tip: U128}, 3/unvouch: {pos: U32}, 4/vote: {candidate: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, approve: Bool}, 5/defender_vote: {approve: Bool}, 6/payout: , 7/found: {founder: [U8; 32], max_members: U32, rules: Vec<U8>}, 8/unfound: , 9/judge_suspended_member: {who: [U8; 32], forgive: Bool}, 10/judge_suspended_candidate: {who: [U8; 32], judgement: Enum<{"0/Rebid", "1/Reject", "2/Approve"}>}, 11/set_max_members: {max: U32}}>, 20/Recovery: Enum<{0/as_recovered: {account: [U8; 32], call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 1/set_recovered: {lost: [U8; 32], rescuer: [U8; 32]}, 2/create_recovery: {friends: Vec<[U8; 32]>, threshold: U16, delay_period: U32}, 3/initiate_recovery: {account: [U8; 32]}, 4/vouch_recovery: {lost: [U8; 32], rescuer: [U8; 32]}, 5/claim_recovery: {account: [U8; 32]}, 6/close_recovery: {rescuer: [U8; 32]}, 7/remove_recovery: , 8/cancel_recovered: {account: [U8; 32]}}>, 21/Scheduler: Enum<{0/schedule: {when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 1/cancel: {when: U32, index: U32}, 2/schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 3/cancel_named: {id: Vec<U8>}, 4/schedule_after: {after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 5/schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}}>, 58/Preimage: Enum<{0/note_preimage: {bytes: Vec<U8>}, 1/unnote_preimage: {hash: [U8; 32]}, 2/request_preimage: {hash: [U8; 32]}, 3/unrequest_preimage: {hash: [U8; 32]}}>, 41/Vesting: Enum<{0/vest: , 1/vest_other: {target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 2/vested_transfer: {target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, schedule: {locked: U128, per_block: U128, starting_block: U32}}, 3/force_vested_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, schedule: {locked: U128, per_block: U128, starting_block: U32}}, 4/merge_schedules: {schedule1_index: U32, schedule2_index: U32}}>, 33/Proxy: Enum<{0/proxy: {real: [U8; 32], force_proxy_type: Enum<{"0/None", "1/Some"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 1/add_proxy: {delegate: [U8; 32], proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, delay: U32}, 2/remove_proxy: {delegate: [U8; 32], proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, delay: U32}, 3/remove_proxies: , 4/anonymous: {proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, delay: U32, index: U16}, 5/kill_anonymous: {spawner: [U8; 32], proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, index: U16, height: Compact<U32>, ext_index: Compact<U32>}, 6/announce: {real: [U8; 32], call_hash: [U8; 32]}, 7/remove_announcement: {real: [U8; 32], call_hash: [U8; 32]}, 8/reject_announcement: {delegate: [U8; 32], call_hash: [U8; 32]}, 9/proxy_announced: {delegate: [U8; 32], real: [U8; 32], force_proxy_type: Enum<{"0/None", "1/Some"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}}>, 34/Multisig: Enum<{0/as_multi_threshold_1: {other_signatories: Vec<[U8; 32]>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 1/as_multi: {threshold: U16, other_signatories: Vec<[U8; 32]>, maybe_timepoint: Enum<{"0/None", "1/Some"}>, call: (Compact<U32>, Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>), store_call: Bool, max_weight: U64}, 2/approve_as_multi: {threshold: U16, other_signatories: Vec<[U8; 32]>, maybe_timepoint: Enum<{"0/None", "1/Some"}>, call_hash: [U8; 32], max_weight: U64}, 3/cancel_as_multi: {threshold: U16, other_signatories: Vec<[U8; 32]>, timepoint: {height: U32, index: U32}, call_hash: [U8; 32]}}>, 39/EVM: Enum<{0/call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 1/create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 2/create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, 40/Ethereum: Enum<{0/transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}, 1/message_transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}}>, 51/BaseFee: Enum<{0/set_base_fee_per_gas: {fee: [U64; 4]}, 1/set_is_active: {is_active: Bool}, 2/set_elasticity: {elasticity: U32}}>, 48/BridgeDarwiniaMessages: Enum<{0/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 1/set_operating_mode: {operating_mode: Enum<{"0/Normal", "1/RejectingOutboundMessages", "2/Halted"}>}, 2/update_pallet_parameter: {parameter: Enum<{"0/DarwiniaToCrabConversionRate"}>}, 3/send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{"0/SourceRoot", "1/TargetAccount", "2/SourceAccount"}>, dispatch_fee_payment: Enum<{"0/AtSourceChain", "1/AtTargetChain"}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, 4/increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, 5/receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, 6/receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, 47/BridgeDarwiniaGrandpa: Enum<{0/submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}, 1/initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, 2/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 3/set_operational: {operational: Bool}}>, 52/BridgeKusamaGrandpa: Enum<{0/submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}, 1/initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, 2/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 3/set_operational: {operational: Bool}}>, 53/BridgeKusamaParachain: Enum<{0/submit_parachain_heads: {relay_block_hash: [U8; 32], parachains: Vec<U32>, parachain_heads_proof: Vec<Vec<U8>>}}>, 56/BridgeCrabParachainMessages: Enum<{0/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 1/set_operating_mode: {operating_mode: Enum<{"0/Normal", "1/RejectingOutboundMessages", "2/Halted"}>}, 2/update_pallet_parameter: {parameter: Enum<{"0/CrabParachainToCrabConversionRate"}>}, 3/send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{"0/SourceRoot", "1/TargetAccount", "2/SourceAccount"}>, dispatch_fee_payment: Enum<{"0/AtSourceChain", "1/AtTargetChain"}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, 4/increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, 5/receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, 6/receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, 49/DarwiniaFeeMarket: Enum<{0/enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{"0/None", "1/Some"}>}, 1/update_locked_collateral: {new_collateral: U128}, 2/update_relay_fee: {new_fee: U128}, 3/cancel_enrollment: , 4/set_slash_protect: {slash_protect: U128}, 5/set_assigned_relayers_number: {number: U32}}>, 55/CrabParachainFeeMarket: Enum<{0/enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{"0/None", "1/Some"}>}, 1/update_locked_collateral: {new_collateral: U128}, 2/update_relay_fee: {new_fee: U128}, 3/cancel_enrollment: , 4/set_slash_protect: {slash_protect: U128}, 5/set_assigned_relayers_number: {number: U32}}>}>
         * @param _length_bound: Compact<U32>
         */
        execute: async (signer: ethers.Signer, _proposal: unknown, _length_bound: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'execute', false, _proposal, _length_bound);
        },

        executeD: async (signer: ethers.Signer, data: BytesLike): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'execute', true, data);
        },

        executeCall: (_proposal: unknown, _length_bound: unknown) => {
            return buildRuntimeCall(metadata, 'Council', 'execute', {
                proposal: _proposal,
                length_bound: _length_bound,
            });
        },

        /**
         * Add a new proposal to either be voted on or executed directly.
         * 
         * Requires the sender to be member.
         * 
         * `threshold` determines whether `proposal` is executed directly (`threshold < 2`)
         * or put up for voting.
         * 
         * # <weight>
         * ## Weight
         * - `O(B + M + P1)` or `O(B + M + P2)` where:
         *   - `B` is `proposal` size in bytes (length-fee-bounded)
         *   - `M` is members-count (code- and governance-bounded)
         *   - branching is influenced by `threshold` where:
         *     - `P1` is proposal execution complexity (`threshold < 2`)
         *     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
         * - DB:
         *   - 1 storage read `is_member` (codec `O(M)`)
         *   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)
         *   - DB accesses influenced by `threshold`:
         *     - EITHER storage accesses done by `proposal` (`threshold < 2`)
         *     - OR proposal insertion (`threshold <= 2`)
         *       - 1 storage mutation `Proposals` (codec `O(P2)`)
         *       - 1 storage mutation `ProposalCount` (codec `O(1)`)
         *       - 1 storage write `ProposalOf` (codec `O(B)`)
         *       - 1 storage write `Voting` (codec `O(M)`)
         *   - 1 event
         * # </weight>
         *
         * @param _threshold: Compact<U32>
         * @param _proposal: Enum<{0/System: Enum<{0/fill_block: {ratio: U32}, 1/remark: {remark: Vec<U8>}, 2/set_heap_pages: {pages: U64}, 3/set_code: {code: Vec<U8>}, 4/set_code_without_checks: {code: Vec<U8>}, 5/set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, 6/kill_storage: {keys: Vec<Vec<U8>>}, 7/kill_prefix: {prefix: Vec<U8>, subkeys: U32}, 8/remark_with_event: {remark: Vec<U8>}}>, 2/Babe: Enum<{0/report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 1/report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 2/plan_config_change: {config: Enum<{"1/V1"}>}}>, 3/Timestamp: Enum<{0/set: {now: Compact<U64>}}>, 4/Indices: Enum<{0/claim: {index: U32}, 1/transfer: {new: [U8; 32], index: U32}, 2/free: {index: U32}, 3/force_transfer: {new: [U8; 32], index: U32, freeze: Bool}, 4/freeze: {index: U32}}>, 23/Balances: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 24/Kton: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 6/Authorship: Enum<{0/set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}>, 38/ElectionProviderMultiPhase: Enum<{0/submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>, votes17: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 16], Compact<U16>)>, votes18: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 17], Compact<U16>)>, votes19: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 18], Compact<U16>)>, votes20: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 19], Compact<U16>)>, votes21: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 20], Compact<U16>)>, votes22: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 21], Compact<U16>)>, votes23: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 22], Compact<U16>)>, votes24: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 23], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, 1/set_minimum_untrusted_score: {maybe_next_score: Enum<{"0/None", "1/Some"}>}, 2/set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, 3/submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>, votes17: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 16], Compact<U16>)>, votes18: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 17], Compact<U16>)>, votes19: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 18], Compact<U16>)>, votes20: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 19], Compact<U16>)>, votes21: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 20], Compact<U16>)>, votes22: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 21], Compact<U16>)>, votes23: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 22], Compact<U16>)>, votes24: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 23], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, 25/Staking: Enum<{0/bond: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Enum<{"0/RingBalance", "1/KtonBalance"}>, payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>, promise_month: U8}, 1/bond_extra: {max_additional: Enum<{"0/RingBalance", "1/KtonBalance"}>, promise_month: U8}, 2/deposit_extra: {value: U128, promise_month: U8}, 3/unbond: {value: Enum<{"0/RingBalance", "1/KtonBalance"}>}, 4/withdraw_unbonded: {num_slashing_spans: U32}, 5/claim_mature_deposits: , 6/try_claim_deposits_with_punish: {expire_time: U64}, 7/validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, 8/nominate: {targets: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 9/chill: , 10/set_payee: {payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>}, 11/set_controller: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 12/set_validator_count: {new: Compact<U32>}, 13/increase_validator_count: {additional: Compact<U32>}, 14/scale_validator_count: {factor: U8}, 15/force_no_eras: , 16/force_new_era: , 17/set_invulnerables: {invulnerables: Vec<[U8; 32]>}, 18/force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, 19/force_new_era_always: , 20/cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, 21/payout_stakers: {validator_stash: [U8; 32], era: U32}, 22/rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, 23/set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, 24/reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, 25/kick: {who: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 26/set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{"0/None", "1/Some"}>, max_validator_count: Enum<{"0/None", "1/Some"}>, chill_threshold: Enum<{"0/None", "1/Some"}>, min_commission: U32}, 27/chill_other: {controller: [U8; 32]}}>, 9/Session: Enum<{0/set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, 1/purge_keys: }>, 11/Grandpa: Enum<{0/report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 1/report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 2/note_stalled: {delay: U32, best_finalized_block_number: U32}}>, 12/ImOnline: Enum<{0/heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, 36/Democracy: Enum<{0/propose: {proposal_hash: [U8; 32], value: Compact<U128>}, 1/second: {proposal: Compact<U32>, seconds_upper_bound: Compact<U32>}, 2/vote: {ref_index: Compact<U32>, vote: Enum<{"0/Standard", "1/Split"}>}, 3/emergency_cancel: {ref_index: U32}, 4/external_propose: {proposal_hash: [U8; 32]}, 5/external_propose_majority: {proposal_hash: [U8; 32]}, 6/external_propose_default: {proposal_hash: [U8; 32]}, 7/fast_track: {proposal_hash: [U8; 32], voting_period: U32, delay: U32}, 8/veto_external: {proposal_hash: [U8; 32]}, 9/cancel_referendum: {ref_index: Compact<U32>}, 10/cancel_queued: {which: U32}, 11/delegate: {to: [U8; 32], conviction: Enum<{"0/None", "1/Locked1x", "2/Locked2x", "3/Locked3x", "4/Locked4x", "5/Locked5x", "6/Locked6x"}>, balance: U128}, 12/undelegate: , 13/clear_public_proposals: , 14/note_preimage: {encoded_proposal: Vec<U8>}, 15/note_preimage_operational: {encoded_proposal: Vec<U8>}, 16/note_imminent_preimage: {encoded_proposal: Vec<U8>}, 17/note_imminent_preimage_operational: {encoded_proposal: Vec<U8>}, 18/reap_preimage: {proposal_hash: [U8; 32], proposal_len_upper_bound: Compact<U32>}, 19/unlock: {target: [U8; 32]}, 20/remove_vote: {index: U32}, 21/remove_other_vote: {target: [U8; 32], index: U32}, 22/enact_proposal: {proposal_hash: [U8; 32], index: U32}, 23/blacklist: {proposal_hash: [U8; 32], maybe_ref_index: Enum<{"0/None", "1/Some"}>}, 24/cancel_proposal: {prop_index: Compact<U32>}}>, 14/Council: Enum<{0/set_members: {new_members: Vec<[U8; 32]>, prime: Enum<{"0/None", "1/Some"}>, old_count: U32}, 1/execute: {proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 2/propose: {threshold: Compact<U32>, proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 3/vote: {proposal: [U8; 32], index: Compact<U32>, approve: Bool}, 4/close: {proposal_hash: [U8; 32], index: Compact<U32>, proposal_weight_bound: Compact<U64>, length_bound: Compact<U32>}, 5/disapprove_proposal: {proposal_hash: [U8; 32]}}>, 15/TechnicalCommittee: Enum<{0/set_members: {new_members: Vec<[U8; 32]>, prime: Enum<{"0/None", "1/Some"}>, old_count: U32}, 1/execute: {proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 2/propose: {threshold: Compact<U32>, proposal: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>, length_bound: Compact<U32>}, 3/vote: {proposal: [U8; 32], index: Compact<U32>, approve: Bool}, 4/close: {proposal_hash: [U8; 32], index: Compact<U32>, proposal_weight_bound: Compact<U64>, length_bound: Compact<U32>}, 5/disapprove_proposal: {proposal_hash: [U8; 32]}}>, 26/PhragmenElection: Enum<{0/vote: {votes: Vec<[U8; 32]>, value: Compact<U128>}, 1/remove_voter: , 2/submit_candidacy: {candidate_count: Compact<U32>}, 3/renounce_candidacy: {renouncing: Enum<{"0/Member", "1/RunnerUp", "2/Candidate"}>}, 4/remove_member: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, has_replacement: Bool}, 5/clean_defunct_voters: {num_voters: U32, num_defunct: U32}}>, 16/TechnicalMembership: Enum<{0/add_member: {who: [U8; 32]}, 1/remove_member: {who: [U8; 32]}, 2/swap_member: {remove: [U8; 32], add: [U8; 32]}, 3/reset_members: {members: Vec<[U8; 32]>}, 4/change_key: {new: [U8; 32]}, 5/set_prime: {who: [U8; 32]}, 6/clear_prime: }>, 32/Treasury: Enum<{0/propose_spend: {value: Compact<U128>, beneficiary: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 1/reject_proposal: {proposal_id: Compact<U32>}, 2/approve_proposal: {proposal_id: Compact<U32>}}>, 44/Tips: Enum<{0/report_awesome: {reason: Vec<U8>, who: [U8; 32]}, 1/retract_tip: {hash: [U8; 32]}, 2/tip_new: {reason: Vec<U8>, who: [U8; 32], tip_value: Compact<U128>}, 3/tip: {hash: [U8; 32], tip_value: Compact<U128>}, 4/close_tip: {hash: [U8; 32]}, 5/slash_tip: {hash: [U8; 32]}}>, 45/Bounties: Enum<{0/propose_bounty: {value: Compact<U128>, description: Vec<U8>}, 1/approve_bounty: {bounty_id: Compact<U32>}, 2/propose_curator: {bounty_id: Compact<U32>, curator: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, fee: Compact<U128>}, 3/unassign_curator: {bounty_id: Compact<U32>}, 4/accept_curator: {bounty_id: Compact<U32>}, 5/award_bounty: {bounty_id: Compact<U32>, beneficiary: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 6/claim_bounty: {bounty_id: Compact<U32>}, 7/close_bounty: {bounty_id: Compact<U32>}, 8/extend_bounty_expiry: {bounty_id: Compact<U32>, remark: Vec<U8>}}>, 17/Utility: Enum<{0/batch: {calls: Vec<Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>>}, 1/as_derivative: {index: U16, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 2/batch_all: {calls: Vec<Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>>}, 3/dispatch_as: {as_origin: Enum<{"0/system", "14/Council", "15/TechnicalCommittee", "40/Ethereum", "4/Void"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}}>, 18/Identity: Enum<{0/add_registrar: {account: [U8; 32]}, 1/set_identity: {info: {additional: Vec<(Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>)>, display: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, legal: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, web: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, riot: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, email: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, pgp_fingerprint: Enum<{"0/None", "1/Some"}>, image: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>, twitter: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>}}, 2/set_subs: {subs: Vec<([U8; 32], Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>)>}, 3/clear_identity: , 4/request_judgement: {reg_index: Compact<U32>, max_fee: Compact<U128>}, 5/cancel_request: {reg_index: U32}, 6/set_fee: {index: Compact<U32>, fee: Compact<U128>}, 7/set_account_id: {index: Compact<U32>, new: [U8; 32]}, 8/set_fields: {index: Compact<U32>, fields: U64}, 9/provide_judgement: {reg_index: Compact<U32>, target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, judgement: Enum<{"0/Unknown", "1/FeePaid", "2/Reasonable", "3/KnownGood", "4/OutOfDate", "5/LowQuality", "6/Erroneous"}>}, 10/kill_identity: {target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 11/add_sub: {sub: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, data: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>}, 12/rename_sub: {sub: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, data: Enum<{"0/None", "1/Raw0", "2/Raw1", "3/Raw2", "4/Raw3", "5/Raw4", "6/Raw5", "7/Raw6", "8/Raw7", "9/Raw8", "10/Raw9", "11/Raw10", "12/Raw11", "13/Raw12", "14/Raw13", "15/Raw14", "16/Raw15", "17/Raw16", "18/Raw17", "19/Raw18", "20/Raw19", "21/Raw20", "22/Raw21", "23/Raw22", "24/Raw23", "25/Raw24", "26/Raw25", "27/Raw26", "28/Raw27", "29/Raw28", "30/Raw29", "31/Raw30", "32/Raw31", "33/Raw32", "34/BlakeTwo256", "35/Sha256", "36/Keccak256", "37/ShaThree256"}>}, 13/remove_sub: {sub: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 14/quit_sub: }>, 19/Society: Enum<{0/bid: {value: U128}, 1/unbid: {pos: U32}, 2/vouch: {who: [U8; 32], value: U128, tip: U128}, 3/unvouch: {pos: U32}, 4/vote: {candidate: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, approve: Bool}, 5/defender_vote: {approve: Bool}, 6/payout: , 7/found: {founder: [U8; 32], max_members: U32, rules: Vec<U8>}, 8/unfound: , 9/judge_suspended_member: {who: [U8; 32], forgive: Bool}, 10/judge_suspended_candidate: {who: [U8; 32], judgement: Enum<{"0/Rebid", "1/Reject", "2/Approve"}>}, 11/set_max_members: {max: U32}}>, 20/Recovery: Enum<{0/as_recovered: {account: [U8; 32], call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 1/set_recovered: {lost: [U8; 32], rescuer: [U8; 32]}, 2/create_recovery: {friends: Vec<[U8; 32]>, threshold: U16, delay_period: U32}, 3/initiate_recovery: {account: [U8; 32]}, 4/vouch_recovery: {lost: [U8; 32], rescuer: [U8; 32]}, 5/claim_recovery: {account: [U8; 32]}, 6/close_recovery: {rescuer: [U8; 32]}, 7/remove_recovery: , 8/cancel_recovered: {account: [U8; 32]}}>, 21/Scheduler: Enum<{0/schedule: {when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 1/cancel: {when: U32, index: U32}, 2/schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 3/cancel_named: {id: Vec<U8>}, 4/schedule_after: {after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 5/schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}}>, 58/Preimage: Enum<{0/note_preimage: {bytes: Vec<U8>}, 1/unnote_preimage: {hash: [U8; 32]}, 2/request_preimage: {hash: [U8; 32]}, 3/unrequest_preimage: {hash: [U8; 32]}}>, 41/Vesting: Enum<{0/vest: , 1/vest_other: {target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 2/vested_transfer: {target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, schedule: {locked: U128, per_block: U128, starting_block: U32}}, 3/force_vested_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, target: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, schedule: {locked: U128, per_block: U128, starting_block: U32}}, 4/merge_schedules: {schedule1_index: U32, schedule2_index: U32}}>, 33/Proxy: Enum<{0/proxy: {real: [U8; 32], force_proxy_type: Enum<{"0/None", "1/Some"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 1/add_proxy: {delegate: [U8; 32], proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, delay: U32}, 2/remove_proxy: {delegate: [U8; 32], proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, delay: U32}, 3/remove_proxies: , 4/anonymous: {proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, delay: U32, index: U16}, 5/kill_anonymous: {spawner: [U8; 32], proxy_type: Enum<{"0/Any", "1/NonTransfer", "2/Governance", "3/Staking", "4/IdentityJudgement", "5/EthereumBridge"}>, index: U16, height: Compact<U32>, ext_index: Compact<U32>}, 6/announce: {real: [U8; 32], call_hash: [U8; 32]}, 7/remove_announcement: {real: [U8; 32], call_hash: [U8; 32]}, 8/reject_announcement: {delegate: [U8; 32], call_hash: [U8; 32]}, 9/proxy_announced: {delegate: [U8; 32], real: [U8; 32], force_proxy_type: Enum<{"0/None", "1/Some"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}}>, 34/Multisig: Enum<{0/as_multi_threshold_1: {other_signatories: Vec<[U8; 32]>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>}, 1/as_multi: {threshold: U16, other_signatories: Vec<[U8; 32]>, maybe_timepoint: Enum<{"0/None", "1/Some"}>, call: (Compact<U32>, Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Indices", "23/Balances", "24/Kton", "6/Authorship", "38/ElectionProviderMultiPhase", "25/Staking", "9/Session", "11/Grandpa", "12/ImOnline", "36/Democracy", "14/Council", "15/TechnicalCommittee", "26/PhragmenElection", "16/TechnicalMembership", "32/Treasury", "44/Tips", "45/Bounties", "17/Utility", "18/Identity", "19/Society", "20/Recovery", "21/Scheduler", "58/Preimage", "41/Vesting", "33/Proxy", "34/Multisig", "39/EVM", "40/Ethereum", "51/BaseFee", "48/BridgeDarwiniaMessages", "47/BridgeDarwiniaGrandpa", "52/BridgeKusamaGrandpa", "53/BridgeKusamaParachain", "56/BridgeCrabParachainMessages", "49/DarwiniaFeeMarket", "55/CrabParachainFeeMarket"}>), store_call: Bool, max_weight: U64}, 2/approve_as_multi: {threshold: U16, other_signatories: Vec<[U8; 32]>, maybe_timepoint: Enum<{"0/None", "1/Some"}>, call_hash: [U8; 32], max_weight: U64}, 3/cancel_as_multi: {threshold: U16, other_signatories: Vec<[U8; 32]>, timepoint: {height: U32, index: U32}, call_hash: [U8; 32]}}>, 39/EVM: Enum<{0/call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 1/create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 2/create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, 40/Ethereum: Enum<{0/transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}, 1/message_transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}}>, 51/BaseFee: Enum<{0/set_base_fee_per_gas: {fee: [U64; 4]}, 1/set_is_active: {is_active: Bool}, 2/set_elasticity: {elasticity: U32}}>, 48/BridgeDarwiniaMessages: Enum<{0/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 1/set_operating_mode: {operating_mode: Enum<{"0/Normal", "1/RejectingOutboundMessages", "2/Halted"}>}, 2/update_pallet_parameter: {parameter: Enum<{"0/DarwiniaToCrabConversionRate"}>}, 3/send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{"0/SourceRoot", "1/TargetAccount", "2/SourceAccount"}>, dispatch_fee_payment: Enum<{"0/AtSourceChain", "1/AtTargetChain"}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, 4/increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, 5/receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, 6/receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, 47/BridgeDarwiniaGrandpa: Enum<{0/submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}, 1/initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, 2/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 3/set_operational: {operational: Bool}}>, 52/BridgeKusamaGrandpa: Enum<{0/submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}, 1/initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, 2/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 3/set_operational: {operational: Bool}}>, 53/BridgeKusamaParachain: Enum<{0/submit_parachain_heads: {relay_block_hash: [U8; 32], parachains: Vec<U32>, parachain_heads_proof: Vec<Vec<U8>>}}>, 56/BridgeCrabParachainMessages: Enum<{0/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 1/set_operating_mode: {operating_mode: Enum<{"0/Normal", "1/RejectingOutboundMessages", "2/Halted"}>}, 2/update_pallet_parameter: {parameter: Enum<{"0/CrabParachainToCrabConversionRate"}>}, 3/send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{"0/SourceRoot", "1/TargetAccount", "2/SourceAccount"}>, dispatch_fee_payment: Enum<{"0/AtSourceChain", "1/AtTargetChain"}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, 4/increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, 5/receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, 6/receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, 49/DarwiniaFeeMarket: Enum<{0/enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{"0/None", "1/Some"}>}, 1/update_locked_collateral: {new_collateral: U128}, 2/update_relay_fee: {new_fee: U128}, 3/cancel_enrollment: , 4/set_slash_protect: {slash_protect: U128}, 5/set_assigned_relayers_number: {number: U32}}>, 55/CrabParachainFeeMarket: Enum<{0/enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{"0/None", "1/Some"}>}, 1/update_locked_collateral: {new_collateral: U128}, 2/update_relay_fee: {new_fee: U128}, 3/cancel_enrollment: , 4/set_slash_protect: {slash_protect: U128}, 5/set_assigned_relayers_number: {number: U32}}>}>
         * @param _length_bound: Compact<U32>
         */
        propose: async (signer: ethers.Signer, _threshold: unknown, _proposal: unknown, _length_bound: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'propose', false, _threshold, _proposal, _length_bound);
        },

        proposeD: async (signer: ethers.Signer, data: BytesLike): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'propose', true, data);
        },

        proposeCall: (_threshold: unknown, _proposal: unknown, _length_bound: unknown) => {
            return buildRuntimeCall(metadata, 'Council', 'propose', {
                threshold: _threshold,
                proposal: _proposal,
                length_bound: _length_bound,
            });
        },

        /**
         * Add an aye or nay vote for the sender to the given proposal.
         * 
         * Requires the sender to be a member.
         * 
         * Transaction fees will be waived if the member is voting on any particular proposal
         * for the first time and the call is successful. Subsequent vote changes will charge a
         * fee.
         * # <weight>
         * ## Weight
         * - `O(M)` where `M` is members-count (code- and governance-bounded)
         * - DB:
         *   - 1 storage read `Members` (codec `O(M)`)
         *   - 1 storage mutation `Voting` (codec `O(M)`)
         * - 1 event
         * # </weight>
         *
         * @param _proposal: [U8; 32]
         * @param _index: Compact<U32>
         * @param _approve: Bool
         */
        vote: async (signer: ethers.Signer, _proposal: unknown, _index: unknown, _approve: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'vote', false, _proposal, _index, _approve);
        },

        voteD: async (signer: ethers.Signer, data: BytesLike): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'vote', true, data);
        },

        voteCall: (_proposal: unknown, _index: unknown, _approve: unknown) => {
            return buildRuntimeCall(metadata, 'Council', 'vote', {
                proposal: _proposal,
                index: _index,
                approve: _approve,
            });
        },

        /**
         * Close a vote that is either approved, disapproved or whose voting period has ended.
         * 
         * May be called by any signed account in order to finish voting and close the proposal.
         * 
         * If called before the end of the voting period it will only close the vote if it is
         * has enough votes to be approved or disapproved.
         * 
         * If called after the end of the voting period abstentions are counted as rejections
         * unless there is a prime member set and the prime member cast an approval.
         * 
         * If the close operation completes successfully with disapproval, the transaction fee will
         * be waived. Otherwise execution of the approved operation will be charged to the caller.
         * 
         * + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed
         * proposal.
         * + `length_bound`: The upper bound for the length of the proposal in storage. Checked via
         * `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.
         * 
         * # <weight>
         * ## Weight
         * - `O(B + M + P1 + P2)` where:
         *   - `B` is `proposal` size in bytes (length-fee-bounded)
         *   - `M` is members-count (code- and governance-bounded)
         *   - `P1` is the complexity of `proposal` preimage.
         *   - `P2` is proposal-count (code-bounded)
         * - DB:
         *  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)
         *  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec
         *    `O(P2)`)
         *  - any mutations done while executing `proposal` (`P1`)
         * - up to 3 events
         * # </weight>
         *
         * @param _proposal_hash: [U8; 32]
         * @param _index: Compact<U32>
         * @param _proposal_weight_bound: Compact<U64>
         * @param _length_bound: Compact<U32>
         */
        close: async (signer: ethers.Signer, _proposal_hash: unknown, _index: unknown, _proposal_weight_bound: unknown, _length_bound: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'close', false, _proposal_hash, _index, _proposal_weight_bound, _length_bound);
        },

        closeD: async (signer: ethers.Signer, data: BytesLike): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'close', true, data);
        },

        closeCall: (_proposal_hash: unknown, _index: unknown, _proposal_weight_bound: unknown, _length_bound: unknown) => {
            return buildRuntimeCall(metadata, 'Council', 'close', {
                proposal_hash: _proposal_hash,
                index: _index,
                proposal_weight_bound: _proposal_weight_bound,
                length_bound: _length_bound,
            });
        },

        /**
         * Disapprove a proposal, close, and remove it from the system, regardless of its current
         * state.
         * 
         * Must be called by the Root origin.
         * 
         * Parameters:
         * * `proposal_hash`: The hash of the proposal that should be disapproved.
         * 
         * # <weight>
         * Complexity: O(P) where P is the number of max proposals
         * DB Weight:
         * * Reads: Proposals
         * * Writes: Voting, Proposals, ProposalOf
         * # </weight>
         *
         * @param _proposal_hash: [U8; 32]
         */
        disapproveProposal: async (signer: ethers.Signer, _proposal_hash: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'disapproveProposal', false, _proposal_hash);
        },

        disapproveProposalD: async (signer: ethers.Signer, data: BytesLike): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Council', 'disapproveProposal', true, data);
        },

        disapproveProposalCall: (_proposal_hash: unknown) => {
            return buildRuntimeCall(metadata, 'Council', 'disapproveProposal', {
                proposal_hash: _proposal_hash,
            });
        },

    }
}
