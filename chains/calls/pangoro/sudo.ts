import { Dispatch } from "../../../call";
import { ethers } from "ethers";

export const getSudo = (dispatch: Dispatch) => {
    return {
        /**
         * @param _call: Enum<{System: Enum<{fill_block: {ratio: U32}, remark: {remark: Vec<U8>}, set_heap_pages: {pages: U64}, set_code: {code: Vec<U8>}, set_code_without_checks: {code: Vec<U8>}, set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, kill_storage: {keys: Vec<Vec<U8>>}, kill_prefix: {prefix: Vec<U8>, subkeys: U32}, remark_with_event: {remark: Vec<U8>}}>, Babe: Enum<{report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, plan_config_change: {config: Enum<{V1}>}}>, Timestamp: Enum<{set: {now: Compact<U64>}}>, Balances: Enum<{transfer: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, set_balance: {who: Enum<{Id, Index, Raw, Address32, Address20}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, force_transfer: {source: Enum<{Id, Index, Raw, Address32, Address20}>, dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_keep_alive: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_all: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, keep_alive: Bool}, force_unreserve: {who: Enum<{Id, Index, Raw, Address32, Address20}>, amount: U128}}>, Kton: Enum<{transfer: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, set_balance: {who: Enum<{Id, Index, Raw, Address32, Address20}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, force_transfer: {source: Enum<{Id, Index, Raw, Address32, Address20}>, dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_keep_alive: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_all: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, keep_alive: Bool}, force_unreserve: {who: Enum<{Id, Index, Raw, Address32, Address20}>, amount: U128}}>, Authorship: Enum<{set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}>}}>, ElectionProviderMultiPhase: Enum<{submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, set_minimum_untrusted_score: {maybe_next_score: Enum<{None, Some}>}, set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, Staking: Enum<{bond: {controller: Enum<{Id, Index, Raw, Address32, Address20}>, value: Enum<{RingBalance, KtonBalance}>, payee: Enum<{Staked, Stash, Controller, Account, None}>, promise_month: U8}, bond_extra: {max_additional: Enum<{RingBalance, KtonBalance}>, promise_month: U8}, deposit_extra: {value: U128, promise_month: U8}, unbond: {value: Enum<{RingBalance, KtonBalance}>}, withdraw_unbonded: {num_slashing_spans: U32}, claim_mature_deposits: , try_claim_deposits_with_punish: {expire_time: U64}, validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, nominate: {targets: Vec<Enum<{Id, Index, Raw, Address32, Address20}>>}, chill: , set_payee: {payee: Enum<{Staked, Stash, Controller, Account, None}>}, set_controller: {controller: Enum<{Id, Index, Raw, Address32, Address20}>}, set_validator_count: {new: Compact<U32>}, increase_validator_count: {additional: Compact<U32>}, scale_validator_count: {factor: U8}, force_no_eras: , force_new_era: , set_invulnerables: {invulnerables: Vec<[U8; 32]>}, force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, force_new_era_always: , cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, payout_stakers: {validator_stash: [U8; 32], era: U32}, rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, kick: {who: Vec<Enum<{Id, Index, Raw, Address32, Address20}>>}, set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{None, Some}>, max_validator_count: Enum<{None, Some}>, chill_threshold: Enum<{None, Some}>, min_commission: U32}, chill_other: {controller: [U8; 32]}}>, Session: Enum<{set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], beefy: [U8; 33], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, purge_keys: }>, Grandpa: Enum<{report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{Prevote, Precommit}>}, key_owner_proof: Enum<{}>}, report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{Prevote, Precommit}>}, key_owner_proof: Enum<{}>}, note_stalled: {delay: U32, best_finalized_block_number: U32}}>, MessageGadget: Enum<{set_commitment_contract: {commitment_contract: [U8; 20]}}>, EcdsaAuthority: Enum<{add_authority: {new: [U8; 20]}, remove_authority: {old: [U8; 20]}, swap_authority: {old: [U8; 20], new: [U8; 20]}, submit_authorities_change_signature: {address: [U8; 20], signature: [U8; 65]}, submit_new_message_root_signature: {address: [U8; 20], signature: [U8; 65]}}>, ImOnline: Enum<{heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, Treasury: Enum<{propose_spend: {value: Compact<U128>, beneficiary: Enum<{Id, Index, Raw, Address32, Address20}>}, reject_proposal: {proposal_id: Compact<U32>}, approve_proposal: {proposal_id: Compact<U32>}}>, Sudo: Enum<{sudo: {call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>}, sudo_unchecked_weight: {call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>, weight: U64}, set_key: {new: Enum<{Id, Index, Raw, Address32, Address20}>}, sudo_as: {who: Enum<{Id, Index, Raw, Address32, Address20}>, call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>}}>, Scheduler: Enum<{schedule: {when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel: {when: U32, index: U32}, schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel_named: {id: Vec<U8>}, schedule_after: {after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}}>, Preimage: Enum<{note_preimage: {bytes: Vec<U8>}, unnote_preimage: {hash: [U8; 32]}, request_preimage: {hash: [U8; 32]}, unrequest_preimage: {hash: [U8; 32]}}>, BridgePangolinGrandpa: Enum<{submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}>}}, initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, set_owner: {new_owner: Enum<{None, Some}>}, set_operational: {operational: Bool}}>, BridgePangolinMessages: Enum<{set_owner: {new_owner: Enum<{None, Some}>}, set_operating_mode: {operating_mode: Enum<{Normal, RejectingOutboundMessages, Halted}>}, update_pallet_parameter: {parameter: Enum<{PangolinToPangoroConversionRate}>}, send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{SourceRoot, TargetAccount, SourceAccount}>, dispatch_fee_payment: Enum<{AtSourceChain, AtTargetChain}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, PangolinFeeMarket: Enum<{enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{None, Some}>}, update_locked_collateral: {new_collateral: U128}, update_relay_fee: {new_fee: U128}, cancel_enrollment: , set_slash_protect: {slash_protect: U128}, set_assigned_relayers_number: {number: U32}}>, TransactionPause: Enum<{pause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}, unpause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}}>, EVM: Enum<{call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, Ethereum: Enum<{transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}, message_transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}}>, BaseFee: Enum<{set_base_fee_per_gas: {fee: [U64; 4]}, set_is_active: {is_active: Bool}, set_elasticity: {elasticity: U32}}>}>
	 */
        sudo: async (signer: ethers.Signer, _call: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudo', false, _call);
        },

        /**
         * @param _call: Enum<{System: Enum<{fill_block: {ratio: U32}, remark: {remark: Vec<U8>}, set_heap_pages: {pages: U64}, set_code: {code: Vec<U8>}, set_code_without_checks: {code: Vec<U8>}, set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, kill_storage: {keys: Vec<Vec<U8>>}, kill_prefix: {prefix: Vec<U8>, subkeys: U32}, remark_with_event: {remark: Vec<U8>}}>, Babe: Enum<{report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, plan_config_change: {config: Enum<{V1}>}}>, Timestamp: Enum<{set: {now: Compact<U64>}}>, Balances: Enum<{transfer: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, set_balance: {who: Enum<{Id, Index, Raw, Address32, Address20}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, force_transfer: {source: Enum<{Id, Index, Raw, Address32, Address20}>, dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_keep_alive: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_all: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, keep_alive: Bool}, force_unreserve: {who: Enum<{Id, Index, Raw, Address32, Address20}>, amount: U128}}>, Kton: Enum<{transfer: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, set_balance: {who: Enum<{Id, Index, Raw, Address32, Address20}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, force_transfer: {source: Enum<{Id, Index, Raw, Address32, Address20}>, dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_keep_alive: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_all: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, keep_alive: Bool}, force_unreserve: {who: Enum<{Id, Index, Raw, Address32, Address20}>, amount: U128}}>, Authorship: Enum<{set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}>}}>, ElectionProviderMultiPhase: Enum<{submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, set_minimum_untrusted_score: {maybe_next_score: Enum<{None, Some}>}, set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, Staking: Enum<{bond: {controller: Enum<{Id, Index, Raw, Address32, Address20}>, value: Enum<{RingBalance, KtonBalance}>, payee: Enum<{Staked, Stash, Controller, Account, None}>, promise_month: U8}, bond_extra: {max_additional: Enum<{RingBalance, KtonBalance}>, promise_month: U8}, deposit_extra: {value: U128, promise_month: U8}, unbond: {value: Enum<{RingBalance, KtonBalance}>}, withdraw_unbonded: {num_slashing_spans: U32}, claim_mature_deposits: , try_claim_deposits_with_punish: {expire_time: U64}, validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, nominate: {targets: Vec<Enum<{Id, Index, Raw, Address32, Address20}>>}, chill: , set_payee: {payee: Enum<{Staked, Stash, Controller, Account, None}>}, set_controller: {controller: Enum<{Id, Index, Raw, Address32, Address20}>}, set_validator_count: {new: Compact<U32>}, increase_validator_count: {additional: Compact<U32>}, scale_validator_count: {factor: U8}, force_no_eras: , force_new_era: , set_invulnerables: {invulnerables: Vec<[U8; 32]>}, force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, force_new_era_always: , cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, payout_stakers: {validator_stash: [U8; 32], era: U32}, rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, kick: {who: Vec<Enum<{Id, Index, Raw, Address32, Address20}>>}, set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{None, Some}>, max_validator_count: Enum<{None, Some}>, chill_threshold: Enum<{None, Some}>, min_commission: U32}, chill_other: {controller: [U8; 32]}}>, Session: Enum<{set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], beefy: [U8; 33], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, purge_keys: }>, Grandpa: Enum<{report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{Prevote, Precommit}>}, key_owner_proof: Enum<{}>}, report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{Prevote, Precommit}>}, key_owner_proof: Enum<{}>}, note_stalled: {delay: U32, best_finalized_block_number: U32}}>, MessageGadget: Enum<{set_commitment_contract: {commitment_contract: [U8; 20]}}>, EcdsaAuthority: Enum<{add_authority: {new: [U8; 20]}, remove_authority: {old: [U8; 20]}, swap_authority: {old: [U8; 20], new: [U8; 20]}, submit_authorities_change_signature: {address: [U8; 20], signature: [U8; 65]}, submit_new_message_root_signature: {address: [U8; 20], signature: [U8; 65]}}>, ImOnline: Enum<{heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, Treasury: Enum<{propose_spend: {value: Compact<U128>, beneficiary: Enum<{Id, Index, Raw, Address32, Address20}>}, reject_proposal: {proposal_id: Compact<U32>}, approve_proposal: {proposal_id: Compact<U32>}}>, Sudo: Enum<{sudo: {call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>}, sudo_unchecked_weight: {call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>, weight: U64}, set_key: {new: Enum<{Id, Index, Raw, Address32, Address20}>}, sudo_as: {who: Enum<{Id, Index, Raw, Address32, Address20}>, call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>}}>, Scheduler: Enum<{schedule: {when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel: {when: U32, index: U32}, schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel_named: {id: Vec<U8>}, schedule_after: {after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}}>, Preimage: Enum<{note_preimage: {bytes: Vec<U8>}, unnote_preimage: {hash: [U8; 32]}, request_preimage: {hash: [U8; 32]}, unrequest_preimage: {hash: [U8; 32]}}>, BridgePangolinGrandpa: Enum<{submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}>}}, initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, set_owner: {new_owner: Enum<{None, Some}>}, set_operational: {operational: Bool}}>, BridgePangolinMessages: Enum<{set_owner: {new_owner: Enum<{None, Some}>}, set_operating_mode: {operating_mode: Enum<{Normal, RejectingOutboundMessages, Halted}>}, update_pallet_parameter: {parameter: Enum<{PangolinToPangoroConversionRate}>}, send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{SourceRoot, TargetAccount, SourceAccount}>, dispatch_fee_payment: Enum<{AtSourceChain, AtTargetChain}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, PangolinFeeMarket: Enum<{enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{None, Some}>}, update_locked_collateral: {new_collateral: U128}, update_relay_fee: {new_fee: U128}, cancel_enrollment: , set_slash_protect: {slash_protect: U128}, set_assigned_relayers_number: {number: U32}}>, TransactionPause: Enum<{pause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}, unpause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}}>, EVM: Enum<{call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, Ethereum: Enum<{transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}, message_transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}}>, BaseFee: Enum<{set_base_fee_per_gas: {fee: [U64; 4]}, set_is_active: {is_active: Bool}, set_elasticity: {elasticity: U32}}>}>
         * @param _weight: U64
	 */
        sudoUncheckedWeight: async (signer: ethers.Signer, _call: unknown, _weight: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudoUncheckedWeight', false, _call, _weight);
        },

        /**
         * @param _new: Enum<{Id: [U8; 32], Index: Compact<()>, Raw: Vec<U8>, Address32: [U8; 32], Address20: [U8; 20]}>
	 */
        setKey: async (signer: ethers.Signer, _new: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'setKey', false, _new);
        },

        /**
         * @param _who: Enum<{Id: [U8; 32], Index: Compact<()>, Raw: Vec<U8>, Address32: [U8; 32], Address20: [U8; 20]}>
         * @param _call: Enum<{System: Enum<{fill_block: {ratio: U32}, remark: {remark: Vec<U8>}, set_heap_pages: {pages: U64}, set_code: {code: Vec<U8>}, set_code_without_checks: {code: Vec<U8>}, set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, kill_storage: {keys: Vec<Vec<U8>>}, kill_prefix: {prefix: Vec<U8>, subkeys: U32}, remark_with_event: {remark: Vec<U8>}}>, Babe: Enum<{report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, plan_config_change: {config: Enum<{V1}>}}>, Timestamp: Enum<{set: {now: Compact<U64>}}>, Balances: Enum<{transfer: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, set_balance: {who: Enum<{Id, Index, Raw, Address32, Address20}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, force_transfer: {source: Enum<{Id, Index, Raw, Address32, Address20}>, dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_keep_alive: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_all: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, keep_alive: Bool}, force_unreserve: {who: Enum<{Id, Index, Raw, Address32, Address20}>, amount: U128}}>, Kton: Enum<{transfer: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, set_balance: {who: Enum<{Id, Index, Raw, Address32, Address20}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, force_transfer: {source: Enum<{Id, Index, Raw, Address32, Address20}>, dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_keep_alive: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, value: Compact<U128>}, transfer_all: {dest: Enum<{Id, Index, Raw, Address32, Address20}>, keep_alive: Bool}, force_unreserve: {who: Enum<{Id, Index, Raw, Address32, Address20}>, amount: U128}}>, Authorship: Enum<{set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}>}}>, ElectionProviderMultiPhase: Enum<{submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, set_minimum_untrusted_score: {maybe_next_score: Enum<{None, Some}>}, set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, Staking: Enum<{bond: {controller: Enum<{Id, Index, Raw, Address32, Address20}>, value: Enum<{RingBalance, KtonBalance}>, payee: Enum<{Staked, Stash, Controller, Account, None}>, promise_month: U8}, bond_extra: {max_additional: Enum<{RingBalance, KtonBalance}>, promise_month: U8}, deposit_extra: {value: U128, promise_month: U8}, unbond: {value: Enum<{RingBalance, KtonBalance}>}, withdraw_unbonded: {num_slashing_spans: U32}, claim_mature_deposits: , try_claim_deposits_with_punish: {expire_time: U64}, validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, nominate: {targets: Vec<Enum<{Id, Index, Raw, Address32, Address20}>>}, chill: , set_payee: {payee: Enum<{Staked, Stash, Controller, Account, None}>}, set_controller: {controller: Enum<{Id, Index, Raw, Address32, Address20}>}, set_validator_count: {new: Compact<U32>}, increase_validator_count: {additional: Compact<U32>}, scale_validator_count: {factor: U8}, force_no_eras: , force_new_era: , set_invulnerables: {invulnerables: Vec<[U8; 32]>}, force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, force_new_era_always: , cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, payout_stakers: {validator_stash: [U8; 32], era: U32}, rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, kick: {who: Vec<Enum<{Id, Index, Raw, Address32, Address20}>>}, set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{None, Some}>, max_validator_count: Enum<{None, Some}>, chill_threshold: Enum<{None, Some}>, min_commission: U32}, chill_other: {controller: [U8; 32]}}>, Session: Enum<{set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], beefy: [U8; 33], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, purge_keys: }>, Grandpa: Enum<{report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{Prevote, Precommit}>}, key_owner_proof: Enum<{}>}, report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{Prevote, Precommit}>}, key_owner_proof: Enum<{}>}, note_stalled: {delay: U32, best_finalized_block_number: U32}}>, MessageGadget: Enum<{set_commitment_contract: {commitment_contract: [U8; 20]}}>, EcdsaAuthority: Enum<{add_authority: {new: [U8; 20]}, remove_authority: {old: [U8; 20]}, swap_authority: {old: [U8; 20], new: [U8; 20]}, submit_authorities_change_signature: {address: [U8; 20], signature: [U8; 65]}, submit_new_message_root_signature: {address: [U8; 20], signature: [U8; 65]}}>, ImOnline: Enum<{heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, Treasury: Enum<{propose_spend: {value: Compact<U128>, beneficiary: Enum<{Id, Index, Raw, Address32, Address20}>}, reject_proposal: {proposal_id: Compact<U32>}, approve_proposal: {proposal_id: Compact<U32>}}>, Sudo: Enum<{sudo: {call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>}, sudo_unchecked_weight: {call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>, weight: U64}, set_key: {new: Enum<{Id, Index, Raw, Address32, Address20}>}, sudo_as: {who: Enum<{Id, Index, Raw, Address32, Address20}>, call: Enum<{System, Babe, Timestamp, Balances, Kton, Authorship, ElectionProviderMultiPhase, Staking, Session, Grandpa, MessageGadget, EcdsaAuthority, ImOnline, Treasury, Sudo, Scheduler, Preimage, BridgePangolinGrandpa, BridgePangolinMessages, PangolinFeeMarket, TransactionPause, EVM, Ethereum, BaseFee}>}}>, Scheduler: Enum<{schedule: {when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel: {when: U32, index: U32}, schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, cancel_named: {id: Vec<U8>}, schedule_after: {after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}, schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{None, Some}>, priority: U8, call: Enum<{Value, Hash}>}}>, Preimage: Enum<{note_preimage: {bytes: Vec<U8>}, unnote_preimage: {hash: [U8; 32]}, request_preimage: {hash: [U8; 32]}, unrequest_preimage: {hash: [U8; 32]}}>, BridgePangolinGrandpa: Enum<{submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}>}}, initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, set_owner: {new_owner: Enum<{None, Some}>}, set_operational: {operational: Bool}}>, BridgePangolinMessages: Enum<{set_owner: {new_owner: Enum<{None, Some}>}, set_operating_mode: {operating_mode: Enum<{Normal, RejectingOutboundMessages, Halted}>}, update_pallet_parameter: {parameter: Enum<{PangolinToPangoroConversionRate}>}, send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{SourceRoot, TargetAccount, SourceAccount}>, dispatch_fee_payment: Enum<{AtSourceChain, AtTargetChain}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, PangolinFeeMarket: Enum<{enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{None, Some}>}, update_locked_collateral: {new_collateral: U128}, update_relay_fee: {new_fee: U128}, cancel_enrollment: , set_slash_protect: {slash_protect: U128}, set_assigned_relayers_number: {number: U32}}>, TransactionPause: Enum<{pause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}, unpause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}}>, EVM: Enum<{call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{None, Some}>, nonce: Enum<{None, Some}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, Ethereum: Enum<{transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}, message_transact: {transaction: Enum<{Legacy, EIP2930, EIP1559}>}}>, BaseFee: Enum<{set_base_fee_per_gas: {fee: [U64; 4]}, set_is_active: {is_active: Bool}, set_elasticity: {elasticity: U32}}>}>
	 */
        sudoAs: async (signer: ethers.Signer, _who: unknown, _call: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudoAs', false, _who, _call);
        },


    }
}
