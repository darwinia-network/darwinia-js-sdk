import { buildRuntimeCall, Dispatch } from "../../../call";
import { ethers } from "ethers";
import { Metadata } from "@polkadot/types";
import { HexString } from "@polkadot/util/types";

export const getSudo = (dispatch: Dispatch, metadata: Metadata) => {
    return {
        /**
         * @param _call: Enum<{0/System: Enum<{0/fill_block: {ratio: U32}, 1/remark: {remark: Vec<U8>}, 2/set_heap_pages: {pages: U64}, 3/set_code: {code: Vec<U8>}, 4/set_code_without_checks: {code: Vec<U8>}, 5/set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, 6/kill_storage: {keys: Vec<Vec<U8>>}, 7/kill_prefix: {prefix: Vec<U8>, subkeys: U32}, 8/remark_with_event: {remark: Vec<U8>}}>, 2/Babe: Enum<{0/report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 1/report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 2/plan_config_change: {config: Enum<{"1/V1"}>}}>, 3/Timestamp: Enum<{0/set: {now: Compact<U64>}}>, 4/Balances: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 5/Kton: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 7/Authorship: Enum<{0/set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}>, 8/ElectionProviderMultiPhase: Enum<{0/submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, 1/set_minimum_untrusted_score: {maybe_next_score: Enum<{"0/None", "1/Some"}>}, 2/set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, 3/submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, 9/Staking: Enum<{0/bond: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Enum<{"0/RingBalance", "1/KtonBalance"}>, payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>, promise_month: U8}, 1/bond_extra: {max_additional: Enum<{"0/RingBalance", "1/KtonBalance"}>, promise_month: U8}, 2/deposit_extra: {value: U128, promise_month: U8}, 3/unbond: {value: Enum<{"0/RingBalance", "1/KtonBalance"}>}, 4/withdraw_unbonded: {num_slashing_spans: U32}, 5/claim_mature_deposits: , 6/try_claim_deposits_with_punish: {expire_time: U64}, 7/validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, 8/nominate: {targets: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 9/chill: , 10/set_payee: {payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>}, 11/set_controller: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 12/set_validator_count: {new: Compact<U32>}, 13/increase_validator_count: {additional: Compact<U32>}, 14/scale_validator_count: {factor: U8}, 15/force_no_eras: , 16/force_new_era: , 17/set_invulnerables: {invulnerables: Vec<[U8; 32]>}, 18/force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, 19/force_new_era_always: , 20/cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, 21/payout_stakers: {validator_stash: [U8; 32], era: U32}, 22/rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, 23/set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, 24/reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, 25/kick: {who: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 26/set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{"0/None", "1/Some"}>, max_validator_count: Enum<{"0/None", "1/Some"}>, chill_threshold: Enum<{"0/None", "1/Some"}>, min_commission: U32}, 27/chill_other: {controller: [U8; 32]}}>, 12/Session: Enum<{0/set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], beefy: [U8; 33], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, 1/purge_keys: }>, 13/Grandpa: Enum<{0/report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: Enum<{}>}, 1/report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: Enum<{}>}, 2/note_stalled: {delay: U32, best_finalized_block_number: U32}}>, 30/MessageGadget: Enum<{0/set_commitment_contract: {commitment_contract: [U8; 20]}}>, 32/EcdsaAuthority: Enum<{0/add_authority: {new: [U8; 20]}, 1/remove_authority: {old: [U8; 20]}, 2/swap_authority: {old: [U8; 20], new: [U8; 20]}, 3/submit_authorities_change_signature: {address: [U8; 20], signature: [U8; 65]}, 4/submit_new_message_root_signature: {address: [U8; 20], signature: [U8; 65]}}>, 14/ImOnline: Enum<{0/heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, 24/Treasury: Enum<{0/propose_spend: {value: Compact<U128>, beneficiary: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 1/reject_proposal: {proposal_id: Compact<U32>}, 2/approve_proposal: {proposal_id: Compact<U32>}}>, 16/Sudo: Enum<{0/sudo: {call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>}, 1/sudo_unchecked_weight: {call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>, weight: U64}, 2/set_key: {new: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 3/sudo_as: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>}}>, 21/Scheduler: Enum<{0/schedule: {when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 1/cancel: {when: U32, index: U32}, 2/schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 3/cancel_named: {id: Vec<U8>}, 4/schedule_after: {after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 5/schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}}>, 33/Preimage: Enum<{0/note_preimage: {bytes: Vec<U8>}, 1/unnote_preimage: {hash: [U8; 32]}, 2/request_preimage: {hash: [U8; 32]}, 3/unrequest_preimage: {hash: [U8; 32]}}>, 19/BridgePangolinGrandpa: Enum<{0/submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}, 1/initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, 2/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 3/set_operational: {operational: Bool}}>, 17/BridgePangolinMessages: Enum<{0/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 1/set_operating_mode: {operating_mode: Enum<{"0/Normal", "1/RejectingOutboundMessages", "2/Halted"}>}, 2/update_pallet_parameter: {parameter: Enum<{"0/PangolinToPangoroConversionRate"}>}, 3/send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{"0/SourceRoot", "1/TargetAccount", "2/SourceAccount"}>, dispatch_fee_payment: Enum<{"0/AtSourceChain", "1/AtTargetChain"}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, 4/increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, 5/receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, 6/receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, 22/PangolinFeeMarket: Enum<{0/enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{"0/None", "1/Some"}>}, 1/update_locked_collateral: {new_collateral: U128}, 2/update_relay_fee: {new_fee: U128}, 3/cancel_enrollment: , 4/set_slash_protect: {slash_protect: U128}, 5/set_assigned_relayers_number: {number: U32}}>, 23/TransactionPause: Enum<{0/pause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}, 1/unpause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}}>, 25/EVM: Enum<{0/call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 1/create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 2/create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, 26/Ethereum: Enum<{0/transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}, 1/message_transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}}>, 31/BaseFee: Enum<{0/set_base_fee_per_gas: {fee: [U64; 4]}, 1/set_is_active: {is_active: Bool}, 2/set_elasticity: {elasticity: U32}}>}>
	 */
        sudo: async (signer: ethers.Signer, _call: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudo', false, _call);
        },

        sudoD: async (signer: ethers.Signer, data: HexString): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudo', true, data);
        },

        sudoCall: (_call: unknown) => {
            return buildRuntimeCall(metadata, 'Sudo', 'sudo', {
                call: _call,
            });
        },

        /**
         * @param _call: Enum<{0/System: Enum<{0/fill_block: {ratio: U32}, 1/remark: {remark: Vec<U8>}, 2/set_heap_pages: {pages: U64}, 3/set_code: {code: Vec<U8>}, 4/set_code_without_checks: {code: Vec<U8>}, 5/set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, 6/kill_storage: {keys: Vec<Vec<U8>>}, 7/kill_prefix: {prefix: Vec<U8>, subkeys: U32}, 8/remark_with_event: {remark: Vec<U8>}}>, 2/Babe: Enum<{0/report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 1/report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 2/plan_config_change: {config: Enum<{"1/V1"}>}}>, 3/Timestamp: Enum<{0/set: {now: Compact<U64>}}>, 4/Balances: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 5/Kton: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 7/Authorship: Enum<{0/set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}>, 8/ElectionProviderMultiPhase: Enum<{0/submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, 1/set_minimum_untrusted_score: {maybe_next_score: Enum<{"0/None", "1/Some"}>}, 2/set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, 3/submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, 9/Staking: Enum<{0/bond: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Enum<{"0/RingBalance", "1/KtonBalance"}>, payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>, promise_month: U8}, 1/bond_extra: {max_additional: Enum<{"0/RingBalance", "1/KtonBalance"}>, promise_month: U8}, 2/deposit_extra: {value: U128, promise_month: U8}, 3/unbond: {value: Enum<{"0/RingBalance", "1/KtonBalance"}>}, 4/withdraw_unbonded: {num_slashing_spans: U32}, 5/claim_mature_deposits: , 6/try_claim_deposits_with_punish: {expire_time: U64}, 7/validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, 8/nominate: {targets: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 9/chill: , 10/set_payee: {payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>}, 11/set_controller: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 12/set_validator_count: {new: Compact<U32>}, 13/increase_validator_count: {additional: Compact<U32>}, 14/scale_validator_count: {factor: U8}, 15/force_no_eras: , 16/force_new_era: , 17/set_invulnerables: {invulnerables: Vec<[U8; 32]>}, 18/force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, 19/force_new_era_always: , 20/cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, 21/payout_stakers: {validator_stash: [U8; 32], era: U32}, 22/rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, 23/set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, 24/reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, 25/kick: {who: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 26/set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{"0/None", "1/Some"}>, max_validator_count: Enum<{"0/None", "1/Some"}>, chill_threshold: Enum<{"0/None", "1/Some"}>, min_commission: U32}, 27/chill_other: {controller: [U8; 32]}}>, 12/Session: Enum<{0/set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], beefy: [U8; 33], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, 1/purge_keys: }>, 13/Grandpa: Enum<{0/report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: Enum<{}>}, 1/report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: Enum<{}>}, 2/note_stalled: {delay: U32, best_finalized_block_number: U32}}>, 30/MessageGadget: Enum<{0/set_commitment_contract: {commitment_contract: [U8; 20]}}>, 32/EcdsaAuthority: Enum<{0/add_authority: {new: [U8; 20]}, 1/remove_authority: {old: [U8; 20]}, 2/swap_authority: {old: [U8; 20], new: [U8; 20]}, 3/submit_authorities_change_signature: {address: [U8; 20], signature: [U8; 65]}, 4/submit_new_message_root_signature: {address: [U8; 20], signature: [U8; 65]}}>, 14/ImOnline: Enum<{0/heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, 24/Treasury: Enum<{0/propose_spend: {value: Compact<U128>, beneficiary: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 1/reject_proposal: {proposal_id: Compact<U32>}, 2/approve_proposal: {proposal_id: Compact<U32>}}>, 16/Sudo: Enum<{0/sudo: {call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>}, 1/sudo_unchecked_weight: {call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>, weight: U64}, 2/set_key: {new: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 3/sudo_as: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>}}>, 21/Scheduler: Enum<{0/schedule: {when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 1/cancel: {when: U32, index: U32}, 2/schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 3/cancel_named: {id: Vec<U8>}, 4/schedule_after: {after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 5/schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}}>, 33/Preimage: Enum<{0/note_preimage: {bytes: Vec<U8>}, 1/unnote_preimage: {hash: [U8; 32]}, 2/request_preimage: {hash: [U8; 32]}, 3/unrequest_preimage: {hash: [U8; 32]}}>, 19/BridgePangolinGrandpa: Enum<{0/submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}, 1/initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, 2/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 3/set_operational: {operational: Bool}}>, 17/BridgePangolinMessages: Enum<{0/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 1/set_operating_mode: {operating_mode: Enum<{"0/Normal", "1/RejectingOutboundMessages", "2/Halted"}>}, 2/update_pallet_parameter: {parameter: Enum<{"0/PangolinToPangoroConversionRate"}>}, 3/send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{"0/SourceRoot", "1/TargetAccount", "2/SourceAccount"}>, dispatch_fee_payment: Enum<{"0/AtSourceChain", "1/AtTargetChain"}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, 4/increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, 5/receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, 6/receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, 22/PangolinFeeMarket: Enum<{0/enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{"0/None", "1/Some"}>}, 1/update_locked_collateral: {new_collateral: U128}, 2/update_relay_fee: {new_fee: U128}, 3/cancel_enrollment: , 4/set_slash_protect: {slash_protect: U128}, 5/set_assigned_relayers_number: {number: U32}}>, 23/TransactionPause: Enum<{0/pause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}, 1/unpause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}}>, 25/EVM: Enum<{0/call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 1/create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 2/create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, 26/Ethereum: Enum<{0/transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}, 1/message_transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}}>, 31/BaseFee: Enum<{0/set_base_fee_per_gas: {fee: [U64; 4]}, 1/set_is_active: {is_active: Bool}, 2/set_elasticity: {elasticity: U32}}>}>
         * @param _weight: U64
	 */
        sudoUncheckedWeight: async (signer: ethers.Signer, _call: unknown, _weight: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudoUncheckedWeight', false, _call, _weight);
        },

        sudoUncheckedWeightD: async (signer: ethers.Signer, data: HexString): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudoUncheckedWeight', true, data);
        },

        sudoUncheckedWeightCall: (_call: unknown, _weight: unknown) => {
            return buildRuntimeCall(metadata, 'Sudo', 'sudoUncheckedWeight', {
                call: _call,
                weight: _weight,
            });
        },

        /**
         * @param _new: Enum<{0/Id: [U8; 32], 1/Index: Compact<()>, 2/Raw: Vec<U8>, 3/Address32: [U8; 32], 4/Address20: [U8; 20]}>
	 */
        setKey: async (signer: ethers.Signer, _new: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'setKey', false, _new);
        },

        setKeyD: async (signer: ethers.Signer, data: HexString): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'setKey', true, data);
        },

        setKeyCall: (_new: unknown) => {
            return buildRuntimeCall(metadata, 'Sudo', 'setKey', {
                new: _new,
            });
        },

        /**
         * @param _who: Enum<{0/Id: [U8; 32], 1/Index: Compact<()>, 2/Raw: Vec<U8>, 3/Address32: [U8; 32], 4/Address20: [U8; 20]}>
         * @param _call: Enum<{0/System: Enum<{0/fill_block: {ratio: U32}, 1/remark: {remark: Vec<U8>}, 2/set_heap_pages: {pages: U64}, 3/set_code: {code: Vec<U8>}, 4/set_code_without_checks: {code: Vec<U8>}, 5/set_storage: {items: Vec<(Vec<U8>, Vec<U8>)>}, 6/kill_storage: {keys: Vec<Vec<U8>>}, 7/kill_prefix: {prefix: Vec<U8>, subkeys: U32}, 8/remark_with_event: {remark: Vec<U8>}}>, 2/Babe: Enum<{0/report_equivocation: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 1/report_equivocation_unsigned: {equivocation_proof: {offender: [U8; 32], slot: U64, first_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, second_header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}}, key_owner_proof: {session: U32, trie_nodes: Vec<Vec<U8>>, validator_count: U32}}, 2/plan_config_change: {config: Enum<{"1/V1"}>}}>, 3/Timestamp: Enum<{0/set: {now: Compact<U64>}}>, 4/Balances: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 5/Kton: Enum<{0/transfer: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 1/set_balance: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, new_free: Compact<U128>, new_reserved: Compact<U128>}, 2/force_transfer: {source: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 3/transfer_keep_alive: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Compact<U128>}, 4/transfer_all: {dest: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, keep_alive: Bool}, 5/force_unreserve: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, amount: U128}}>, 7/Authorship: Enum<{0/set_uncles: {new_uncles: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}>, 8/ElectionProviderMultiPhase: Enum<{0/submit_unsigned: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, witness: {voters: Compact<U32>, targets: Compact<U32>}}, 1/set_minimum_untrusted_score: {maybe_next_score: Enum<{"0/None", "1/Some"}>}, 2/set_emergency_election_result: {supports: Vec<([U8; 32], {total: U128, voters: Vec<([U8; 32], U128)>})>}, 3/submit: {raw_solution: {solution: {votes1: Vec<(Compact<U32>, Compact<U16>)>, votes2: Vec<(Compact<U32>, (Compact<U16>, Compact<U16>), Compact<U16>)>, votes3: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 2], Compact<U16>)>, votes4: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 3], Compact<U16>)>, votes5: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 4], Compact<U16>)>, votes6: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 5], Compact<U16>)>, votes7: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 6], Compact<U16>)>, votes8: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 7], Compact<U16>)>, votes9: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 8], Compact<U16>)>, votes10: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 9], Compact<U16>)>, votes11: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 10], Compact<U16>)>, votes12: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 11], Compact<U16>)>, votes13: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 12], Compact<U16>)>, votes14: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 13], Compact<U16>)>, votes15: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 14], Compact<U16>)>, votes16: Vec<(Compact<U32>, [(Compact<U16>, Compact<U16>); 15], Compact<U16>)>}, score: [U128; 3], round: U32}, num_signed_submissions: U32}}>, 9/Staking: Enum<{0/bond: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, value: Enum<{"0/RingBalance", "1/KtonBalance"}>, payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>, promise_month: U8}, 1/bond_extra: {max_additional: Enum<{"0/RingBalance", "1/KtonBalance"}>, promise_month: U8}, 2/deposit_extra: {value: U128, promise_month: U8}, 3/unbond: {value: Enum<{"0/RingBalance", "1/KtonBalance"}>}, 4/withdraw_unbonded: {num_slashing_spans: U32}, 5/claim_mature_deposits: , 6/try_claim_deposits_with_punish: {expire_time: U64}, 7/validate: {prefs: {commission: Compact<U32>, blocked: Bool}}, 8/nominate: {targets: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 9/chill: , 10/set_payee: {payee: Enum<{"0/Staked", "1/Stash", "2/Controller", "3/Account", "4/None"}>}, 11/set_controller: {controller: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 12/set_validator_count: {new: Compact<U32>}, 13/increase_validator_count: {additional: Compact<U32>}, 14/scale_validator_count: {factor: U8}, 15/force_no_eras: , 16/force_new_era: , 17/set_invulnerables: {invulnerables: Vec<[U8; 32]>}, 18/force_unstake: {stash: [U8; 32], num_slashing_spans: U32}, 19/force_new_era_always: , 20/cancel_deferred_slash: {era: U32, slash_indices: Vec<U32>}, 21/payout_stakers: {validator_stash: [U8; 32], era: U32}, 22/rebond: {plan_to_rebond_ring: Compact<U128>, plan_to_rebond_kton: Compact<U128>}, 23/set_history_depth: {new_history_depth: Compact<U32>, era_items_deleted: Compact<U32>}, 24/reap_stash: {stash: [U8; 32], num_slashing_spans: U32}, 25/kick: {who: Vec<Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>>}, 26/set_staking_configs: {min_nominator_bond: U128, min_validator_bond: U128, max_nominator_count: Enum<{"0/None", "1/Some"}>, max_validator_count: Enum<{"0/None", "1/Some"}>, chill_threshold: Enum<{"0/None", "1/Some"}>, min_commission: U32}, 27/chill_other: {controller: [U8; 32]}}>, 12/Session: Enum<{0/set_keys: {keys: {babe: [U8; 32], grandpa: [U8; 32], beefy: [U8; 33], im_online: [U8; 32], authority_discovery: [U8; 32]}, proof: Vec<U8>}, 1/purge_keys: }>, 13/Grandpa: Enum<{0/report_equivocation: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: Enum<{}>}, 1/report_equivocation_unsigned: {equivocation_proof: {set_id: U64, equivocation: Enum<{"0/Prevote", "1/Precommit"}>}, key_owner_proof: Enum<{}>}, 2/note_stalled: {delay: U32, best_finalized_block_number: U32}}>, 30/MessageGadget: Enum<{0/set_commitment_contract: {commitment_contract: [U8; 20]}}>, 32/EcdsaAuthority: Enum<{0/add_authority: {new: [U8; 20]}, 1/remove_authority: {old: [U8; 20]}, 2/swap_authority: {old: [U8; 20], new: [U8; 20]}, 3/submit_authorities_change_signature: {address: [U8; 20], signature: [U8; 65]}, 4/submit_new_message_root_signature: {address: [U8; 20], signature: [U8; 65]}}>, 14/ImOnline: Enum<{0/heartbeat: {heartbeat: {block_number: U32, network_state: {peer_id: Vec<U8>, external_addresses: Vec<Vec<U8>>}, session_index: U32, authority_index: U32, validators_len: U32}, signature: [U8; 64]}}>, 24/Treasury: Enum<{0/propose_spend: {value: Compact<U128>, beneficiary: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 1/reject_proposal: {proposal_id: Compact<U32>}, 2/approve_proposal: {proposal_id: Compact<U32>}}>, 16/Sudo: Enum<{0/sudo: {call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>}, 1/sudo_unchecked_weight: {call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>, weight: U64}, 2/set_key: {new: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>}, 3/sudo_as: {who: Enum<{"0/Id", "1/Index", "2/Raw", "3/Address32", "4/Address20"}>, call: Enum<{"0/System", "2/Babe", "3/Timestamp", "4/Balances", "5/Kton", "7/Authorship", "8/ElectionProviderMultiPhase", "9/Staking", "12/Session", "13/Grandpa", "30/MessageGadget", "32/EcdsaAuthority", "14/ImOnline", "24/Treasury", "16/Sudo", "21/Scheduler", "33/Preimage", "19/BridgePangolinGrandpa", "17/BridgePangolinMessages", "22/PangolinFeeMarket", "23/TransactionPause", "25/EVM", "26/Ethereum", "31/BaseFee"}>}}>, 21/Scheduler: Enum<{0/schedule: {when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 1/cancel: {when: U32, index: U32}, 2/schedule_named: {id: Vec<U8>, when: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 3/cancel_named: {id: Vec<U8>}, 4/schedule_after: {after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}, 5/schedule_named_after: {id: Vec<U8>, after: U32, maybe_periodic: Enum<{"0/None", "1/Some"}>, priority: U8, call: Enum<{"0/Value", "1/Hash"}>}}>, 33/Preimage: Enum<{0/note_preimage: {bytes: Vec<U8>}, 1/unnote_preimage: {hash: [U8; 32]}, 2/request_preimage: {hash: [U8; 32]}, 3/unrequest_preimage: {hash: [U8; 32]}}>, 19/BridgePangolinGrandpa: Enum<{0/submit_finality_proof: {finality_target: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, justification: {round: U64, commit: {target_hash: [U8; 32], target_number: U32, precommits: Vec<{precommit: {target_hash: [U8; 32], target_number: U32}, signature: [U8; 64], id: [U8; 32]}>}, votes_ancestries: Vec<{parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}>}}, 1/initialize: {init_data: {header: {parent_hash: [U8; 32], number: Compact<U32>, state_root: [U8; 32], extrinsics_root: [U8; 32], digest: {logs: Vec<Enum<{"6/PreRuntime", "4/Consensus", "5/Seal", "0/Other", "8/RuntimeEnvironmentUpdated"}>>}}, authority_list: Vec<([U8; 32], U64)>, set_id: U64, is_halted: Bool}}, 2/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 3/set_operational: {operational: Bool}}>, 17/BridgePangolinMessages: Enum<{0/set_owner: {new_owner: Enum<{"0/None", "1/Some"}>}, 1/set_operating_mode: {operating_mode: Enum<{"0/Normal", "1/RejectingOutboundMessages", "2/Halted"}>}, 2/update_pallet_parameter: {parameter: Enum<{"0/PangolinToPangoroConversionRate"}>}, 3/send_message: {lane_id: [U8; 4], payload: {spec_version: U32, weight: U64, origin: Enum<{"0/SourceRoot", "1/TargetAccount", "2/SourceAccount"}>, dispatch_fee_payment: Enum<{"0/AtSourceChain", "1/AtTargetChain"}>, call: Vec<U8>}, delivery_and_dispatch_fee: U128}, 4/increase_message_fee: {lane_id: [U8; 4], nonce: U64, additional_fee: U128}, 5/receive_messages_proof: {relayer_id_at_bridged_chain: [U8; 32], proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4], nonces_start: U64, nonces_end: U64}, messages_count: U32, dispatch_weight: U64}, 6/receive_messages_delivery_proof: {proof: {bridged_header_hash: [U8; 32], storage_proof: Vec<Vec<U8>>, lane: [U8; 4]}, relayers_state: {unrewarded_relayer_entries: U64, messages_in_oldest_entry: U64, total_messages: U64}}}>, 22/PangolinFeeMarket: Enum<{0/enroll_and_lock_collateral: {lock_collateral: U128, relay_fee: Enum<{"0/None", "1/Some"}>}, 1/update_locked_collateral: {new_collateral: U128}, 2/update_relay_fee: {new_fee: U128}, 3/cancel_enrollment: , 4/set_slash_protect: {slash_protect: U128}, 5/set_assigned_relayers_number: {number: U32}}>, 23/TransactionPause: Enum<{0/pause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}, 1/unpause_transaction: {pallet_name: Vec<U8>, function_name: Vec<U8>}}>, 25/EVM: Enum<{0/call: {source: [U8; 20], target: [U8; 20], input: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 1/create: {source: [U8; 20], init: Vec<U8>, value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}, 2/create2: {source: [U8; 20], init: Vec<U8>, salt: [U8; 32], value: [U64; 4], gas_limit: U64, max_fee_per_gas: [U64; 4], max_priority_fee_per_gas: Enum<{"0/None", "1/Some"}>, nonce: Enum<{"0/None", "1/Some"}>, access_list: Vec<([U8; 20], Vec<[U8; 32]>)>}}>, 26/Ethereum: Enum<{0/transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}, 1/message_transact: {transaction: Enum<{"0/Legacy", "1/EIP2930", "2/EIP1559"}>}}>, 31/BaseFee: Enum<{0/set_base_fee_per_gas: {fee: [U64; 4]}, 1/set_is_active: {is_active: Bool}, 2/set_elasticity: {elasticity: U32}}>}>
	 */
        sudoAs: async (signer: ethers.Signer, _who: unknown, _call: unknown): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudoAs', false, _who, _call);
        },

        sudoAsD: async (signer: ethers.Signer, data: HexString): Promise<ethers.providers.TransactionReceipt> => {
            return await dispatch(signer, 'Sudo', 'sudoAs', true, data);
        },

        sudoAsCall: (_who: unknown, _call: unknown) => {
            return buildRuntimeCall(metadata, 'Sudo', 'sudoAs', {
                who: _who,
                call: _call,
            });
        },

    }
}
